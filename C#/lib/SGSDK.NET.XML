<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SGSDK.NET</name>
    </assembly>
    <members>
        <member name="T:SwinGame.Audio">
            <summary>
            The Audio class contains the code to play sound effects and music.
            </summary>
        </member>
        <member name="M:SwinGame.Audio.OpenAudio">
            <summary>
            Opens the Audio System for SwinGameSDK. This must be called before any sound
            can be played. Usually this is at the start of your program.
            </summary>
        </member>
        <member name="M:SwinGame.Audio.CloseAudio">
            <summary>
            Closes the Audio system. This should be done at the end of your program to 
            ensure that it closes safely.
            </summary>
        </member>
        <member name="M:SwinGame.Audio.PlaySoundEffect(SwinGame.SoundEffect,System.Int32)">
            <summary>
            Play the indicated sound effect a number of times.
            </summary>
            <param name="effect">The Sound Effect to play</param>
            <param name="loops">The number of times to play it. -1 plays it infinitely</param>
        </member>
        <member name="M:SwinGame.Audio.PlaySoundEffect(SwinGame.SoundEffect,System.Int32,System.Single)">
            <summary>
            Play the indicated sound effect a number of times.
            </summary>
            <param name="effect">The Sound Effect to play</param>
            <param name="loops">The number of times to play it. -1 plays it infinitely</param>
            <param name="vol">The volume to play the effect at, 1 = 100%</param>
        </member>
        <member name="M:SwinGame.Audio.PlaySoundEffect(SwinGame.SoundEffect,System.Single)">
            <summary>
            Play the indicated sound effect at a given volume.
            </summary>
            <param name="effect">The Sound Effect to play</param>
            <param name="vol">The volume to play the effect at, 1 = 100%</param>
        </member>
        <member name="M:SwinGame.Audio.PlaySoundEffect(SwinGame.SoundEffect)">
            <summary>
            Play the indicated sound effect once.
            </summary>
            <param name="effect">The Sound Effect to play</param>
        </member>
        <member name="M:SwinGame.Audio.LoadSoundEffect(System.String)">
            <summary>
            Loads a SoundEffect from file. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="path">Path to the Sound Effect file</param>
            <returns>A SoundEffect</returns>
        </member>
        <member name="M:SwinGame.Audio.FreeSoundEffect(SwinGame.SoundEffect)">
            <summary>
            Frees a Sound Effect From Memory. You need to ensure that all sound effects
            that you load are freed by the end of the game. This is usually done
            when the program exits.
            </summary>
            <param name="effect">The effect to be freed from memory</param>
        </member>
        <member name="M:SwinGame.Audio.LoadMusic(System.String)">
            <summary>
            Load music to play from the file system. Music can be in the form of a
            wav, ogg, or mp3 file. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="path">Path to Music file</param>
            <returns>Music</returns>
        </member>
        <member name="M:SwinGame.Audio.FreeMusic(SwinGame.Music)">
            <summary>
            Free a music value. All loaded music values need to be freed by the
            end of the program. This is usually done when the program exits.
            </summary>
            <param name="music">Music to be freed</param>
        </member>
        <member name="M:SwinGame.Audio.PlayMusic(SwinGame.Music,System.Int32)">
            <summary>
            Play the indicated music effect a number of times
            The loops paramater can use anything starting from -1, 
            -1 meaning that the sound plays forever
            </summary>
            <param name="music">The Music to play</param>
            <param name="loops">The number of times to play it</param>
        </member>
        <member name="M:SwinGame.Audio.PlayMusic(SwinGame.Music)">
            <summary>
            Play the indicated music until stopped. This will cause
            the music to loop.
            </summary>
            <param name="music">The Music to play</param>
        </member>
        <member name="M:SwinGame.Audio.IsSoundEffectPlaying(SwinGame.SoundEffect)">
            <summary>
            This function checks whether a sound is playing. 
            </summary>
            <param name="effect">The sound effect to check if it is playing</param>
            <returns>True if it is playing</returns>
        </member>
        <member name="M:SwinGame.Audio.IsMusicPlaying">
            <summary>
            This function checks whether music is playing
            </summary>
            <returns>True if it is playing</returns>
        </member>
        <member name="M:SwinGame.Audio.StopMusic">
            <summary>
            Stops the current music from playing.
            </summary>
        </member>
        <member name="M:SwinGame.Audio.StopSoundEffect(SwinGame.SoundEffect)">
            <summary>
            Stop playing the indicated sound effect.
            </summary>
            <param name="effect">The effect to stop playing.</param>
        </member>
        <member name="M:SwinGame.Audio.MusicVolume">
            <summary>
            Returns the current playback volume of the music.
            </summary>
            <returns>A value between 0 and 1.0 that represents the percentage volume of the music</returns>
        </member>
        <member name="M:SwinGame.Audio.SetMusicVolume(System.Single)">
            <summary>
            Sets the playback volume of the music.
            </summary>
            <param name="level">the level of the music as a percentage. 0 for no music, 1 for 100% volume.</param>
        </member>
        <member name="T:SwinGame.Bitmap">
             <summary>
             Bitmap
            
            	The bitmap type is a pointer to a BitmapData. The BitmapData record
            	contains the data used by the SwinGame API to represent
            	bitmaps. You can create new bitmaps in memory for drawing operatings
            	using the CreateBitmap function. This can then be optimised for drawing
            	to the screen using the OptimiseBitmap routine. Also see the DrawBitmap
            	routines.
             </summary>
        </member>
        <member name="M:SwinGame.Bitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a blank bitmap of the given size. This is useful for caching drawing, 
            for slower drawing operations.Most of the Drawing routines provide an 
            option to specify what bitmap to draw onto.
            </summary>
            <param name="width">Width of a bitmap</param>
            <param name="height">Height of a bitmap</param>
        </member>
        <member name="M:SwinGame.Bitmap.#ctor(System.String)">
            <summary>
            Load the specified image file. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="path">Path to the image file</param>
        </member>
        <member name="M:SwinGame.Bitmap.#ctor(System.String,System.Boolean,System.Drawing.Color)">
            <summary>
            Load the specified image file with a transparent color. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="pathToBitmap">Path to the image file</param>
            <param name="transparent">True if this image has transparent pixels</param>
            <param name="transparentColor">Color of the transparent pixels</param>
        </member>
        <member name="M:SwinGame.Bitmap.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Load an image with transparency. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="pathToBitmap">Path to the image file</param>
            <param name="transparentColor">Color of the transparent pixels</param>
        </member>
        <member name="M:SwinGame.Bitmap.Optimise">
            <summary>
            Optimise the bitmap for faster drawing.
            </summary>
        </member>
        <member name="M:SwinGame.Bitmap.Clear">
            <summary>
            Clears the bitmap to Black.
            </summary>
        </member>
        <member name="M:SwinGame.Bitmap.Clear(System.Drawing.Color)">
            <summary>
            Clear the bitmap with the specified color.
            </summary>
            <param name="toColour">The color used to clear</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawOnto(SwinGame.Bitmap,System.Int32,System.Int32)">
            <summary>
            Draw bitmap to the specified bitmap. You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">Bitmap to draw on</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawOnto(SwinGame.Bitmap,SwinGame.Point2D)">
            <summary>
            Draw bitmap to the specified bitmap. You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">Bitmap to draw on</param>
            <param name="position">Position to Draw to</param>
        </member>
        <member name="M:SwinGame.Bitmap.Draw(SwinGame.Point2D)">
            <summary>
            Draw the bitmap.
            </summary>
            <param name="position">Position to Draw to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPartOnto(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto another bitmap (dest), this is faster than drawing 
            the whole bitmap
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="srcX">The x offset to the area to copy in bitmapToDraw</param>
            <param name="srcY">The y offset to the area to copy in bitmapToDraw</param>
            <param name="srcW">The width of the area to copy</param>
            <param name="srcH">The height of the area to copy</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPartOnto(SwinGame.Bitmap,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Draws part of the bitmap onto another bitmap (dest), this is faster than drawing 
            the whole bitmap
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPartOnto(SwinGame.Bitmap,System.Drawing.Rectangle,SwinGame.Point2D)">
            <summary>
            Draws part of a bitmap onto another bitmap (dest).
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="source">The possition and size of the part of the bitmap to draw</param>
            <param name="position">The x,y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Bitmap.Draw(System.Single,System.Single)">
            <summary>
            Draws the bitmap onto the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="x">The x location to draw the bitmap to</param>
            <param name="y">The y location to draw the bitmap to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPart(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Draws part of a bitmap onto the screen, x and y are in game 
            coordinates not screen coordinates.
            </summary>
            <param name="srcX">The x offset to the area to copy in bitmapToDraw</param>
            <param name="srcY">The y offset to the area to copy in bitmapToDraw</param>
            <param name="srcW">The width of the area to copy</param>
            <param name="srcH">The height of the area to copy</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPart(System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto the screen, x and y are in game 
            coordinates not screen coordinates, this is faster than DrawBitmap
            if you don't want all of the bitmap to be shown
            </summary>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPart(System.Drawing.Rectangle,SwinGame.Point2D)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto the screen, x and y are in game 
            coordinates not screen coordinates, this is faster than DrawBitmap
            if you don't want all of the bitmap to be shown
            </summary>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="position">The x,y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPartOnScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws Part of a Bitmap On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="srcX">Starting X on Bitmap</param>
            <param name="srcY">Starting Y on Bitmap</param>
            <param name="srcW">Width</param>
            <param name="srcH">Height</param>
            <param name="x">Screen X Position</param>
            <param name="y">Screen Y Position</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPartOnScreen(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Draws Part of a Bitmap On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="source">The size of the bitmap to draw</param>
            <param name="x">Screen X Position</param>
            <param name="y">Screen Y Position</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawPartOnScreen(System.Drawing.Rectangle,SwinGame.Point2D)">
            <summary>
            Draws Part of a Bitmap On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="source">The size of the bitmap to draw</param>
            <param name="position">Screen X,Y Position</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawOnScreen(System.Int32,System.Int32)">
            <summary>
            Draws a Bitmap, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
        </member>
        <member name="M:SwinGame.Bitmap.DrawOnScreen(SwinGame.Point2D)">
            <summary>
            Draws a Bitmap, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="position">The Position to draw the Bitmap</param>
        </member>
        <member name="M:SwinGame.Bitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the color of the pixel in the bitmap.
            </summary>
            <param name="x">the x location of the pixel</param>
            <param name="y">the y location of the pixel</param>
            <returns>the color of the pixel in the bitmap at location x,y</returns>
        </member>
        <member name="M:SwinGame.Bitmap.op_Implicit(SwinGame.Bitmap)~System.IntPtr">
            <summary>
            Cast the bitmap to its native pointer.
            </summary>
            <param name="bmp">the bitmap</param>
            <returns>its native pointer</returns>
        </member>
        <member name="M:SwinGame.Bitmap.Dispose">
            <summary>
            Clean up the associated system resources.
            </summary>
        </member>
        <member name="M:SwinGame.Bitmap.MakeOpaque">
            <summary>
            Make the bitmap opaque, for the purpose of drawing onto another bitmap. 
            This is required in cases where drawing a transparent bitmap onto a 
            fully transparent bitmap.
            </summary>
            <remarks>
            Make the bitmap to be drawn opaque when drawing onto a fully transparent
            bitmap.
            </remarks>
        </member>
        <member name="M:SwinGame.Bitmap.MakeTransparent">
            <summary>
            Turns alpha blending back on for a bitmap. This reverses the
            MakeOpaque process.
            </summary>
        </member>
        <member name="M:SwinGame.Bitmap.RotateZoom(System.Int32,System.Single)">
            <summary>
            Rotate and zoom the passed in bitmap, returning a new
            bitmap at the given rotation.
            </summary>
            <param name="deg">the amount to rotate (in degrees)</param>
            <param name="scale">the amount to scale the bitmap</param>
            <returns>The new bitmap, rotated and zoomed</returns>
        </member>
        <member name="M:SwinGame.Bitmap.SetupForCollisions">
            <summary>
            Sets up a bitmap so that collisions will work at a pixel level.
            This does not need to be called on loaded bitmaps, only on
            dynamically created bitmaps, and bitmaps created using
            rotate and zoom.
            </summary>
        </member>
        <member name="P:SwinGame.Bitmap.Width">
            <summary>
            The Width of the Bitmap
            </summary>
        </member>
        <member name="P:SwinGame.Bitmap.Height">
            <summary>
            The Height of the Bitmap
            </summary>
        </member>
        <member name="T:SwinGame.Camera">
            <summary>
            The Camera class is used to position the screen within your
            game world. This is useful for games that allow the player
            to move around, such as scrolling shooters or RPG.
            </summary>
        </member>
        <member name="M:SwinGame.Camera.ScreenX(System.Single)">
            <summary>
            Converts a game x coordinate, to a screen coordinate. This is useful for
            determining where a game element is appearing on the screen.
            </summary>
            <param name="x">Game x coordinate</param>
            <returns>Screen x coordinate that matches the requested game x</returns>
        </member>
        <member name="M:SwinGame.Camera.ScreenY(System.Single)">
            <summary>
            Converts a game y coordinate, to a screen coordinate. This is useful for
            determining where a game element is appearing on the screen.
            </summary>
            <param name="y">Game y coordinate</param>
            <returns>Screen y coordinate that matches the requested game y</returns>
        </member>
        <member name="M:SwinGame.Camera.GameX(System.Int32)">
            <summary>
            This converts a screen x coordinate to a game x coordinate. This is
            useful for determining what is at a given point on the screen, for example
            finding what game coordinate the user has clicked on.
            </summary>
            <param name="x">Screen X Coordinate</param>
            <returns>Game x coordinate that matches the screen coordinate</returns>
        </member>
        <member name="M:SwinGame.Camera.GameY(System.Int32)">
            <summary>
            This converts a screen y coordinate to a game y coordinate. This is
            useful for determining what is at a given point on the screen, for example
            finding what game coordinate the user has clicked on.
            </summary>
            <param name="y">Screen Y coordinate</param>
            <returns>Game y coordinate that matches the screen coordinate</returns>
        </member>
        <member name="M:SwinGame.Camera.ToGameCoordinates(SwinGame.Point2D)">
            <summary>
            Converts the indicated point from screen coordinates to game Coordinates.
            This is useful for determining what is at a given point on the screen, 
            for example finding what game coordinate the user has clicked on.
            </summary>
            <param name="screenPoint">Point on the screen you want to convert</param>
            <returns>The point in the game that is currently drawn on the screen at screenPoint</returns>
        </member>
        <member name="M:SwinGame.Camera.MoveVisualArea(SwinGame.Vector)">
            <summary>
            Moves the Camera's visual area by the amount in the vector.
            </summary>
            <param name="v">The amount to move the camera</param>
        </member>
        <member name="M:SwinGame.Camera.MoveVisualArea(System.Single,System.Single)">
            <summary>
            Moves the Camera's visual area by the amounts specified.
            </summary>
            <param name="dx">The amount to move the camera on the X axis</param>
            <param name="dy">The amount to move the camera on the Y axis</param>
        </member>
        <member name="M:SwinGame.Camera.SetScreenOffset(System.Single,System.Single)">
            <summary>
            Moves the top left of the screen to a given x, y location in game
            coordinates. Use this to move the camera to a given point.
            </summary>
            <param name="x">new x position of camera (top left)</param>
            <param name="y">new y position of camera (top left)</param>
        </member>
        <member name="M:SwinGame.Camera.SetScreenOffset(SwinGame.Point2D)">
            <summary>
            Moves the top left of the screen to a given x, y location in game
            coordinates. Use this to move the camera to a given point.
            </summary>
            <param name="pt">The point to use for the new top left</param>
        </member>
        <member name="M:SwinGame.Camera.FollowSprite(SwinGame.Sprite,System.Int32,System.Int32)">
            <summary>
            Move the Camera to center on the Sprite. This must be called each time
            you move the sprite if you want the camera to follow that sprite. The offsets
            allow you to move the sprite from direct center, for example if yOffset is set
            to +10 the sprite will appear 10 pixels below center.
            </summary>
            <param name="sprite">The sprite you want to move the camera to view.</param>
            <param name="xOffset">The x offset from center</param>
            <param name="yOffset">The y offset from center</param>
        </member>
        <member name="M:SwinGame.Camera.FollowSprite(SwinGame.Sprite,SwinGame.Vector)">
            <summary>
            Move the Camera to center on the Sprite. This must be called each time
            you move the sprite if you want the camera to follow that sprite. The offsets
            allow you to move the sprite from direct center, for example if yOffset is set
            to +10 the sprite will appear 10 pixels below center.
            </summary>
            <param name="sprite">The sprite you want to move the camera to view.</param>
            <param name="offset">A vector containing the offset from center.</param>
        </member>
        <member name="P:SwinGame.Camera.XOffset">
            <summary>
            Gets the XOffset of the Screen, the distance that the camera has 
            moved on the X axis.
            </summary>
            <returns>Distance the camera has moved on the X axis</returns>
        </member>
        <member name="P:SwinGame.Camera.YOffset">
            <summary>
            Gets the YOffset of the Screen, the distance that the camera has 
            moved on the y axis
            </summary>
            <returns>Distance the camera has moved on the Y axis</returns>
        </member>
        <member name="T:SwinGame.CollisionDetectionRange">
            <summary>
            Enumeration: CollisionDetectionRanges
            This is used to indicate the kind of collision being checked with the
            Sprite collision routines.  
            </summary>
        </member>
        <member name="F:SwinGame.CollisionDetectionRange.CollisionRangeEquals">
            <summary>
            Collision Range is Equal
            </summary>
        </member>
        <member name="F:SwinGame.CollisionDetectionRange.CollisionRangeGreaterThan">
            <summary>
            Collision Range is Greater
            </summary>
        </member>
        <member name="F:SwinGame.CollisionDetectionRange.CollisionRangeLessThan">
            <summary>
            Collision Range is Less
            </summary>
        </member>
        <member name="T:SwinGame.CollisionSide">
            <summary>
            CollisionSides
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.TopLeft">
            <summary>
            TopLeft
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.TopRight">
            <summary>
            TopRight
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.BottomLeft">
            <summary>
            BottomLeft
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.BottomRight">
            <summary>
            BottomRight
            </summary>
        </member>
        <member name="F:SwinGame.CollisionSide.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:SwinGame.Event">
            <summary>
            MappyLoader Events
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event1">
            <summary>
            Event 1
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event2">
            <summary>
            Event 2
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event3">
            <summary>
            Event 3
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event4">
            <summary>
            Event 4
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event5">
            <summary>
            Event 5
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event6">
            <summary>
            Event 6
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event7">
            <summary>
            Event 7
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event8">
            <summary>
            Event 8
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event9">
            <summary>
            Event 9
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event10">
            <summary>
            Event 10
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event11">
            <summary>
            Event 11
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event12">
            <summary>
            Event 12
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event13">
            <summary>
            Event 13
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event14">
            <summary>
            Event 14
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event15">
            <summary>
            Event 15
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event16">
            <summary>
            Evemnt 16
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event17">
            <summary>
            Event 17
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event18">
            <summary>
            Event 18
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event19">
            <summary>
            Event 19
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event20">
            <summary>
            Event 20
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event21">
            <summary>
            Event 21
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event22">
            <summary>
            Event 22
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event23">
            <summary>
            Event 23
            </summary>
        </member>
        <member name="F:SwinGame.Event.Event24">
            <summary>
            Event 24
            </summary>
        </member>
        <member name="T:SwinGame.Font">
            <summary>
            Fonts are used to render text to bitmaps and to the screen.
            Fonts must be loaded using the CreateFont routine. Also see the
            DrawText and DrawTextLines routines.
            </summary>
        </member>
        <member name="M:SwinGame.Font.op_Implicit(SwinGame.Font)~System.IntPtr">
            <summary>
            Cast the bitmap to its native pointer.
            </summary>
            <param name="fnt">the Font</param>
            <returns>its native pointer</returns>
        </member>
        <member name="M:SwinGame.Font.Dispose">
            <summary>
            Clean up the associated system resources.
            </summary>
        </member>
        <member name="M:SwinGame.Font.#ctor(System.String,System.Int32)">
            <summary>
            Loads a font from file with the specified side. Fonts must be freed using
            the FreeFont routine once finished with. Once the font is loaded you
            can set its style using SetFontStyle. Fonts are then used to draw and
            measure text in your programs.
            </summary>
            <param name="fontName">The name of the font file to load from the file system</param>
            <param name="size">The point size of the font</param>
        </member>
        <member name="M:SwinGame.Font.SetStyle(SwinGame.FontStyle)">
            <summary>
            Sets the style of the passed in font. This is time consuming, so load
            fonts multiple times and set the style for each if needed.
            </summary>
            <param name="style">The new style for the font, values can be read together</param>
        </member>
        <member name="M:SwinGame.Font.TextWidth(System.String)">
            <summary>
            Calculates the width of a string when drawn with a given font.
            </summary>
            <param name="theText">The text to measure</param>
            <returns>The width of the drawing in pixels</returns>
        </member>
        <member name="M:SwinGame.Font.TextHeight(System.String)">
            <summary>
            Calculates the height of a string when drawn with a given font.
            </summary>
            <param name="theText">The text to measure</param>
            <returns>The height of the drawing in pixels</returns>
        </member>
        <member name="T:SwinGame.FontAlignment">
            <summary>
            Use font alignment for certain drawing operations. With these
            operations you specify the area to draw in as well as the alignment
            within that area. See DrawTextLines.
            </summary>
        </member>
        <member name="F:SwinGame.FontAlignment.AlignLeft">
            <summary>
            Align to the Left
            </summary>
        </member>
        <member name="F:SwinGame.FontAlignment.AlignCenter">
            <summary>
            Align to Center
            </summary>
        </member>
        <member name="F:SwinGame.FontAlignment.AlignRight">
            <summary>
            Align to the Right
            </summary>
        </member>
        <member name="T:SwinGame.FontStyle">
            <summary>
            Use font styles to set the style of a font. Setting the style is time
            consuming, so create alternative font variables for each different
            style you want to work with. Note that these values can be logical
            ORed together to combine styles, e.g. BoldFont or ItalicFont = both
            bold and italic.
            </summary>
        </member>
        <member name="F:SwinGame.FontStyle.NormalFont">
            <summary>
            Normal Font
            </summary>
        </member>
        <member name="F:SwinGame.FontStyle.BoldFont">
            <summary>
            Bold Font
            </summary>
        </member>
        <member name="F:SwinGame.FontStyle.ItalicFont">
            <summary>
            Italic Font
            </summary>
        </member>
        <member name="F:SwinGame.FontStyle.UnderlineFont">
            <summary>
            Underline Font
            </summary>
        </member>
        <member name="T:SwinGame.Keys">
            <summary>
            Keys that can be used on the Keyboard
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_BACK">
            <summary>
            Backspace
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_TAB">
            <summary>
            Tab
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_CLEAR">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RETURN">
            <summary>
            Return
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SHIFT">
            <summary>
            Shift
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_CONTROL">
            <summary>
            Control
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_MENU">
            <summary>
            Menu
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_ALT">
            <summary>
            Alt
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_PAUSE">
            <summary>
            Pause
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_CAPITAL">
            <summary>
            Capital
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_ESCAPE">
            <summary>
            Escape
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SPACE">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_PAGE_UP">
            <summary>
            Page Up
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_PAGE_DOWN">
            <summary>
            Page Down
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_END">
            <summary>
            End
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_HOME">
            <summary>
            Home
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LEFT">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_UP">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RIGHT">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_DOWN">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_PRINT">
            <summary>
            Print
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_INSERT">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_DELETE">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_HELP">
            <summary>
            Help
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_3">
            <summary>
            3
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_4">
            <summary>
            4
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_5">
            <summary>
            5
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_6">
            <summary>
            6
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_7">
            <summary>
            7
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_8">
            <summary>
            8
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_9">
            <summary>
            9
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_A">
            <summary>
            A
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_B">
            <summary>
            B
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_C">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_D">
            <summary>
            D
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_E">
            <summary>
            E
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F">
            <summary>
            F
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_G">
            <summary>
            G
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_H">
            <summary>
            H
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_I">
            <summary>
            I
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_J">
            <summary>
            J
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_K">
            <summary>
            K
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_L">
            <summary>
            L
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_M">
            <summary>
            M
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_N">
            <summary>
            N
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_O">
            <summary>
            O
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_P">
            <summary>
            P
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_Q">
            <summary>
            Q
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_R">
            <summary>
            R
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_S">
            <summary>
            S
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_T">
            <summary>
            T
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_U">
            <summary>
            U
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_V">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_W">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LWIN">
            <summary>
            Left Win
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RWIN">
            <summary>
            Right Win
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_APPS">
            <summary>
            Apps
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SLEEP">
            <summary>
            Sleep
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD0">
            <summary>
            Numpad 0
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD1">
            <summary>
            Numpad 1
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD2">
            <summary>
            Numpad 2
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD3">
            <summary>
            Numpad 3
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD4">
            <summary>
            Numpad 4
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD5">
            <summary>
            Numpad 5
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD6">
            <summary>
            Numpad 6
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD7">
            <summary>
            Numpad 7
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD8">
            <summary>
            Numpad 8
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMPAD9">
            <summary>
            Numpad 9
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_MULTIPLY">
            <summary>
            Multiply
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_ADD">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SUBTRACT">
            <summary>
            Subtract
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_DECIMAL">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_DIVIDE">
            <summary>
            Divide
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F1">
            <summary>
            F1
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F2">
            <summary>
            F2
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F3">
            <summary>
            F3
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F4">
            <summary>
            F4
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F5">
            <summary>
            F5
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F6">
            <summary>
            F6
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F7">
            <summary>
            F7
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F8">
            <summary>
            F8
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F9">
            <summary>
            F9
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F10">
            <summary>
            F10
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F11">
            <summary>
            F11
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F12">
            <summary>
            F12
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F13">
            <summary>
            F13
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F14">
            <summary>
            F14
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_F15">
            <summary>
            F15
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_NUMLOCK">
            <summary>
            Numlock
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SCROLL">
            <summary>
            Scroll
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LSHIFT">
            <summary>
            Left Shift
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RSHIFT">
            <summary>
            Right Shift
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LCONTROL">
            <summary>
            Left Control
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RCONTROL">
            <summary>
            Right Control
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LMENU">
            <summary>
            Left Menu
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LALT">
            <summary>
            Left Alt
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RMENU">
            <summary>
            Right Menu
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_RALT">
            <summary>
            Right Alt
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_EQUALS">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_COLON">
            <summary>
            Colon
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SEMICOLON">
            <summary>
            Semicolon
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_LESS">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_GREATER">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_QUESTION">
            <summary>
            Question ?
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_AT">
            <summary>
            At @
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_COMMA">
            <summary>
            Comma ,
            </summary>			
        </member>
        <member name="F:SwinGame.Keys.VK_PERIOD">
            <summary>
            Period .
            </summary>
        </member>
        <member name="F:SwinGame.Keys.VK_SLASH">
            <summary>
            Slash /
            </summary>
        </member>
        <member name="T:SwinGame.LineSegment">
            <summary>
            LineSegments are a data type that holds 2 Points, the Start and Ending Points of a Line
            </summary>
        </member>
        <member name="F:SwinGame.LineSegment.StartPoint">
            <summary>
            Start Point of the Line Segment
            </summary>
        </member>
        <member name="F:SwinGame.LineSegment.EndPoint">
            <summary>
            End Point of the Line Segment
            </summary>
        </member>
        <member name="M:SwinGame.LineSegment.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a line from x1,y1 to x2,y2.
            </summary>
            <param name="x1">the x value of the starting point</param>
            <param name="y1">the y value of the starting point</param>
            <param name="x2">the x value of the ending point</param>
            <param name="y2">the y value of the ending point</param>
        </member>
        <member name="M:SwinGame.LineSegment.#ctor(SwinGame.Point2D,SwinGame.Vector)">
            <summary>
            Creates a line from a point, to the end of the indicated Vector. This can be
            useful for drawing a vector as a line, for debugging or level editing.
            </summary>
            <param name="pnt">the starting point of the line</param>
            <param name="mvt">the offset from the starting point to the ending point</param>
        </member>
        <member name="M:SwinGame.LineSegment.ToVector">
            <summary>
            Represent a LineSegment as a vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SwinGame.LineSegment.IsPointOnLine(SwinGame.Point2D)">
            <summary>
            Determines if a point exists on a line.
            </summary>
            <param name="pnt">The point that you want to check</param>
            <returns>true if pnt is on the line</returns>
        </member>
        <member name="M:SwinGame.LineSegment.MidPoint">
            <summary>
            Returns the mid point of the line.
            </summary>
            <returns>The point at the middle of the line</returns>
        </member>
        <member name="T:SwinGame.Map">
            <summary>
            A Map is a tile based collection of sprites, that form a complete map. Map's can be animated,
            and maps that are animated, animate automatically. Collisions between sprite and maps can also be
            done, so your sprites do not go into collidable areas of the map.
            </summary>
        </member>
        <member name="M:SwinGame.Map.#ctor(System.String)">
            <summary>
            Loads a Map, using mapFile to indicate which map file to load.
            This requires that the .sga and .png files for the map
            are located in the resources folder of the application.
            </summary>
            <param name="mapName">Name of the map</param>
            <returns>Map</returns>
        </member>
        <member name="M:SwinGame.Map.Draw">
            <summary>
            Draws the specified Map
            </summary>
        </member>
        <member name="M:SwinGame.Map.CollisionWithMap(SwinGame.Sprite,SwinGame.Vector)">
            <summary>
            This function checks if the specified sprite has collided with the specified map.
            This function will also move the sprite outside of the map automatically.
            Useful for checking collisions, getting which side the collision has occured on, and for
            moving the sprite out of the collidable areas of the map.
            This overload allows you to pass in a vector, which describes the movement of the sprite, if the sprites movement vector has
            not been used.
            </summary>
            <param name="spr">Sprite to be checked for collisions</param>
            <param name="vec">Vector to be used</param>
            <returns>Collision Side</returns>
        </member>
        <member name="M:SwinGame.Map.CollisionWithMap(SwinGame.Sprite)">
            <summary>
            This function checks if the specified sprite has collided with the specified map.
            This function will also move the sprite outside of the map automatically.
            Useful for checking collisions, getting which side the collision has occured on, and for
            moving the sprite out of the collidable areas of the map.
            </summary>
            <param name="spr">Sprite to be checked for collisions</param>
            <returns>Collision Side</returns>
        </member>
        <member name="M:SwinGame.Map.EventCount(SwinGame.Event)">
            <summary>
            This function returns the number of the specified Event type found in the Map specified.
            </summary>
            <param name="evnt">Event Type to be checked</param>
            <returns>Number of events of Event Type specified</returns>
        </member>
        <member name="M:SwinGame.Map.EventPositionX(SwinGame.Event,System.Int32)">
            <summary>
            Gets the X Coordinate of the Event specified. evnt is the Event Type that is to be searched
            for, and eventnumber is the index of the event, since there can be more then 1 of each Event
            Type.
            </summary>
            <param name="evnt">Event Type</param>
            <param name="eventnumber">Event Index</param>
            <returns>Game X Coordinate</returns>
        </member>
        <member name="M:SwinGame.Map.EventPositionY(SwinGame.Event,System.Int32)">
            <summary>
            Gets the Y Coordinate of the Event specified. evnt is the Event Type that is to be searched
            for, and eventnumber is the index of the event, since there can be more then 1 of each Event
            Type.
            </summary>
            <param name="evnt">Event Type</param>
            <param name="eventnumber">Event Index</param>
            <returns>Game Y Coordinate</returns>
        </member>
        <member name="M:SwinGame.Map.EventPosition(SwinGame.Event,System.Int32)">
            <summary>
            Gets the Coordinates of the Event specified. evnt is the Event Type that is to be searched
            for, and eventnumber is the index of the event, since there can be more then 1 of each Event
            Type.
            </summary>
            <param name="evnt">Event Type</param>
            <param name="eventNumber">Event Index</param>
            <returns>Game Coordinate of the event instance</returns>
        </member>
        <member name="M:SwinGame.Map.SpriteHasCollidedWithMapTile(SwinGame.Sprite,System.Int32@,System.Int32@)">
            <summary>
            Checks whether the specified Sprite has collided with a map tile within the specified map.
            If so, this method returns true, else false. This command can be used to determine whether
            a Sprite has collided with the map, but also to find the x and y coordinate of the tile within
            the map it collided with.
            </summary>
            <param name="spr">The Sprite to be checked against the map</param>
            <param name="collidedX">The X Coordinate of the Tile that Sprite has collided with</param>
            <param name="collidedY">The Y Coordinate of the Tile that Sprite has collided with</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Map.SpriteHasCollidedWithMapTile(SwinGame.Sprite)">
            <summary>
            Checks whether the specified Sprite has collided with a map tile within the specified map.
            If so, this method returns true, else false. This command can be used to determine whether
            a Sprite has collided with the map.
            </summary>
            <param name="spr">The Sprite to be checked against the map</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Map.WillCollideOnSide(SwinGame.Sprite)">
            <summary>
            This function with find which side the Collision between a Sprite and Map has occurred on.
            This can be used to make different choices depending on which side of the Map the Sprite has
            hit.
            </summary>
            <param name="spr">The sprite to be checke against collisions</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Map.MoveSpriteOutOfTile(SwinGame.Sprite,System.Int32,System.Int32)">
            <summary>
            This routine with move a specified sprite out the map's tile that is specified. This routine
            moves the sprite so that is just outside of the tile in question.
            </summary>
            <param name="spr">Sprite to be moved out</param>
            <param name="x">X Coordinate of the tile</param>
            <param name="y">Y Coordinate of the tile</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Map.GetTileFromPoint(SwinGame.Point2D)">
            <summary>
            This function will get the tile that contains the given point, if no tile exists that
            contains the point, a tile with both indexes as -1 and Points(0,0) will be returned.
            </summary>
            <param name="point">Point</param>
        </member>
        <member name="M:SwinGame.Map.GetEventAtTile(System.Int32,System.Int32)">
            <summary>
            This function will return the Event of the tile within the map. The number 255 will be
            returned if there is no event on this tile, or there is no tile at the given x and y index
            </summary>
            <param name="xIndex">The X Index of the Tile</param>
            <param name="yIndex">The Y Index of the Tile</param>
        </member>
        <member name="M:SwinGame.Map.op_Implicit(SwinGame.Map)~System.IntPtr">
            <summary>
            Casts the Map to its native pointer.
            </summary>
            <param name="effect">the effect to cast</param>
            <returns>the native pointer</returns>
        </member>
        <member name="M:SwinGame.Map.Dispose">
            <summary>
            Clean up the native resources used by this sound effect.
            </summary>
        </member>
        <member name="P:SwinGame.Map.Width">
            <summary>
            This function will return the width of the map in tiles.
            Example: using a 10x12 map, this function will return 10.
            </summary>
        </member>
        <member name="P:SwinGame.Map.Height">
            <summary>
            This function will return the height of the map in tiles.
            Example: using a 10x12 map, this function will return 12.
            </summary>
        </member>
        <member name="P:SwinGame.Map.BlockWidth">
            <summary>
            This function will return the width of the map blocks
            </summary>
        </member>
        <member name="P:SwinGame.Map.BlockHeight">
            <summary>
            This function will return the width of the map blocks
            </summary>
        </member>
        <member name="P:SwinGame.Map.GapX">
            <summary>
            This function will return the horizontal gap between tiles in ISOMETRIC maps
            </summary>
        </member>
        <member name="P:SwinGame.Map.GapY">
            <summary>
            This function will return the vertical gap between tiles in ISOMETRIC maps
            </summary>
        </member>
        <member name="P:SwinGame.Map.StaggerX">
            <summary>
            This function will return the horizontal offset for ISOMETRIC maps
            </summary>
        </member>
        <member name="P:SwinGame.Map.StaggerY">
            <summary>
            This function will return the vertical offset for ISOMETRIC maps
            </summary>
        </member>
        <member name="T:SwinGame.MappyLoader">
            <summary>
            MappyLoader Class
            </summary>
        </member>
        <member name="M:SwinGame.MappyLoader.LoadMap(System.String)">
            <summary>
            Loads a Map, using mapFile to indicate which map file to load.
            </summary>
            <param name="mapName">Name of the map</param>
            <returns>Map</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.DrawMap(SwinGame.Map)">
            <summary>
            Draws the specified Map
            </summary>
            <param name="map">Map to be drawn to the screen</param>
        </member>
        <member name="M:SwinGame.MappyLoader.CollisionWithMap(SwinGame.Map,SwinGame.Sprite,SwinGame.Vector)">
            <summary>
            This function checks if the specified sprite has collided with the specified map.
            This function will also move the sprite outside of the map automatically.
            Useful for checking collisions, getting which side the collision has occured on, and for
            moving the sprite out of the collidable areas of the map.
            This overload allows you to pass in a vector, which describes the movement of the sprite, if the sprites movement vector has
            not been used.
            </summary>
            <param name="map">Map to be checked for collisions</param>
            <param name="spr">Sprite to be checked for collisions</param>
            <param name="vec">Vector to be used</param>
            <returns>Collision Side</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.CollisionWithMap(SwinGame.Map,SwinGame.Sprite)">
            <summary>
            This function checks if the specified sprite has collided with the specified map.
            This function will also move the sprite outside of the map automatically.
            Useful for checking collisions, getting which side the collision has occured on, and for
            moving the sprite out of the collidable areas of the map.
            </summary>
            <param name="map">Map to be checked for collisions</param>
            <param name="spr">Sprite to be checked for collisions</param>
            <returns>Collision Side</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.EventCount(SwinGame.Map,SwinGame.Event)">
            <summary>
            This function returns the number of the specified Event type found in the Map specified.
            </summary>
            <param name="map">Map to be checked</param>
            <param name="evnt">Event Type to be checked</param>
            <returns>Number of events of Event Type specified</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.EventPositionX(SwinGame.Map,SwinGame.Event,System.Int32)">
            <summary>
            Gets the X Coordinate of the Event specified. evnt is the Event Type that is to be searched
            for, and eventnumber is the index of the event, since there can be more then 1 of each Event
            Type.
            </summary>
            <param name="map">Map containing the Event</param>
            <param name="evnt">Event Type</param>
            <param name="eventnumber">Event Index</param>
            <returns>Game X Coordinate</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.EventPositionY(SwinGame.Map,SwinGame.Event,System.Int32)">
            <summary>
            Gets the Y Coordinate of the Event specified. evnt is the Event Type that is to be searched
            for, and eventnumber is the index of the event, since there can be more then 1 of each Event
            Type.
            </summary>
            <param name="map">Map containing the event</param>
            <param name="evnt">Event Type</param>
            <param name="eventnumber">Event Index</param>
            <returns>Game Y Coordinate</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.EventPosition(SwinGame.Map,SwinGame.Event,System.Int32)">
            <summary>
            Gets the Coordinates of the Event specified. evnt is the Event Type that is to be searched
            for, and eventnumber is the index of the event, since there can be more then 1 of each Event
            Type.
            </summary>
            <param name="map">Map containing the event</param>
            <param name="evnt">Event Type</param>
            <param name="eventNumber">Event Index</param>
            <returns>Game Coordinate of the event instance</returns>
        </member>
        <member name="M:SwinGame.MappyLoader.FreeMap(SwinGame.Map)">
            <summary>
            Free a loaded map. This ensures that the resources used by the Map are returned to the system.
            This must be called once you have finished using the Map.
            </summary>
            <param name="map">The Map to Free</param>
        </member>
        <member name="M:SwinGame.MappyLoader.SpriteHasCollidedWithMapTile(SwinGame.Map,SwinGame.Sprite,System.Int32@,System.Int32@)">
            <summary>
            Checks whether the specified Sprite has collided with a map tile within the specified map.
            If so, this method returns true, else false. This command can be used to determine whether
            a Sprite has collided with the map, but also to find the x and y coordinate of the tile within
            the map it collided with.
            </summary>
            <param name="map">The Map to be checked against for collisions</param>
            <param name="spr">The Sprite to be checked against the map</param>
            <param name="collidedX">The X Coordinate of the Tile that Sprite has collided with</param>
            <param name="collidedY">The Y Coordinate of the Tile that Sprite has collided with</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.MappyLoader.SpriteHasCollidedWithMapTile(SwinGame.Map,SwinGame.Sprite)">
            <summary>
            Checks whether the specified Sprite has collided with a map tile within the specified map.
            If so, this method returns true, else false. This command can be used to determine whether
            a Sprite has collided with the map.
            </summary>
            <param name="map">The Map to be checked against for collisions</param>
            <param name="spr">The Sprite to be checked against the map</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.MappyLoader.WillCollideOnSide(SwinGame.Map,SwinGame.Sprite)">
            <summary>
            This function with find which side the Collision between a Sprite and Map has occurred on.
            This can be used to make different choices depending on which side of the Map the Sprite has
            hit.
            </summary>
            <param name="map">The map to be checked against collisions</param>
            <param name="spr">The sprite to be checke against collisions</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.MappyLoader.MoveSpriteOutOfTile(SwinGame.Map,SwinGame.Sprite,System.Int32,System.Int32)">
            <summary>
            This routine with move a specified sprite out the map's tile that is specified. This routine
            moves the sprite so that is just outside of the tile in question.
            </summary>
            <param name="map">Map containing the tile that is to be checked against</param>
            <param name="spr">Sprite to be moved out</param>
            <param name="x">X Coordinate of the tile</param>
            <param name="y">Y Coordinate of the tile</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.MappyLoader.MapWidth(SwinGame.Map)">
            <summary>
            This function will return the width of the map in tiles.
            Example: using a 10x12 map, this function will return 10.
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.MapHeight(SwinGame.Map)">
            <summary>
            This function will return the height of the map in tiles.
            Example: using a 10x12 map, this function will return 12.
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.BlockWidth(SwinGame.Map)">
            <summary>
            This function will return the width of the map blocks
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.BlockHeight(SwinGame.Map)">
            <summary>
            This function will return the width of the map blocks
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.GapX(SwinGame.Map)">
            <summary>
            This function will return the horizontal gap between tiles in ISOMETRIC maps
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.GapY(SwinGame.Map)">
            <summary>
            This function will return the vertical gap between tiles in ISOMETRIC maps
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.StaggerX(SwinGame.Map)">
            <summary>
            This function will return the horizontal offset for ISOMETRIC maps
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.StaggerY(SwinGame.Map)">
            <summary>
            This function will return the vertical offset for ISOMETRIC maps
            </summary>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.GetTileFromPoint(SwinGame.Point2D,SwinGame.Map)">
            <summary>
            This function will get the tile that contains the given point, if no tile exists that
            contains the point, a tile with both indexes as -1 and Points(0,0) will be returned.
            </summary>
            <param name="point">Point</param>
            <param name="map">The Map</param>
        </member>
        <member name="M:SwinGame.MappyLoader.GetEventAtTile(SwinGame.Map,System.Int32,System.Int32)">
            <summary>
            This function will return the Event of the tile within the map. The number 255 will be
            returned if there is no event on this tile, or there is no tile at the given x and y index
            </summary>
            <param name="map">The Map</param>
            <param name="xIndex">The X Index of the Tile</param>
            <param name="yIndex">The Y Index of the Tile</param>
        </member>
        <member name="T:SwinGame.Core">
            <summary>
            Core Class
            
            This Classes contains on the Core functionality of the SwinGameSDK. This includes
            the methods for openning the game window, processing events, getting paths to
            resources, and others.
            </summary>
        </member>
        <member name="M:SwinGame.Core.RegisterDelete(System.IntPtr,SwinGame.PtrKind)">
            <summary>
            Registers the pointer with SwinGame core to have the memory freed.
            This is done to ensure freeing is done on a single thread.
            </summary>
            <param name="ptr">the pointer to register</param>
            <param name="kind">the type of the pointer</param>
        </member>
        <member name="M:SwinGame.Core.FreeAnythingToFree">
            <summary>
            Free all pointers awaiting deletion.
            </summary>
        </member>
        <member name="M:SwinGame.Core.DoFree(System.IntPtr,SwinGame.PtrKind)">
            <summary>
            Frees the memory associated with a pointer. Only called from
            FreeAnythingToFree...
            </summary>
            <param name="ptr">the pointer to free</param>
            <param name="kind">the type of data being freed</param>
        </member>
        <member name="M:SwinGame.Core.ExceptionOccured">
            <summary>
            Indicates if an exception has occurred in the SwinGame Library. This is used to determine the error
            The error message to be returned to the user.
            </summary>
            <returns>True if an error has occurred</returns>
        </member>
        <member name="M:SwinGame.Core.OpenGraphicsWindow(System.String)">
            <summary>
            Opens the graphical window so that it can be drawn onto. You can set the
            icon for this window using SetIcon. The window itself is only drawn when
            you call RefreshScreen. All windows are opened at 32 bits per pixel. You
            can toggle fullscreen using ToggleFullScreen. The window is closed when
            the application terminates. Width and Height are set to 800 by 600.
            </summary>
            <param name="caption">Caption for the Window</param>
        </member>
        <member name="M:SwinGame.Core.OpenGraphicsWindow(System.String,System.Int32,System.Int32)">
            <summary>
            Opens the graphical window so that it can be drawn onto. You can set the
            icon for this window using SetIcon. The window itself is only drawn when
            you call RefreshScreen. All windows are opened at 32 bits per pixel. You
            can toggle fullscreen using ToggleFullScreen. The window is closed when
            the application terminates.
            </summary>
            <param name="caption">Caption for the Window</param>
            <param name="width">Width of the Window</param>
            <param name="height">Height of the Window</param>
        </member>
        <member name="M:SwinGame.Core.WindowCloseRequested">
            <summary>
            Checks to see if the window has been asked to close. You need to handle
            this if you want the game to end when the window is closed. This value
            is updated by the ProcessEvents routine. 
            </summary>
            <returns>Returns true if the window has been requested to close</returns>
        </member>
        <member name="M:SwinGame.Core.ProcessEvents">
            <summary>
            ProcessEvents allows the SwinGame API to react to user interactions. This
            routine checks the current keyboard and mouse states. This routine must
            be called at least once within your game loop to enable user interaction.
            </summary>
        </member>
        <member name="M:SwinGame.Core.SetIcon(System.String)">
            <summary>
            Sets the icon for the window. This must be called before openning the
            graphics window. The icon is loaded as a bitmap, though this can be from
            any kind of bitmap file.
            </summary>
            <param name="iconFilename">The name of the file to load as the image icon</param>
        </member>
        <member name="M:SwinGame.Core.ChangeScreenSize(System.Int32,System.Int32)">
            <summary>
            Changes the size of the screen.
            </summary>
            <param name="width">New width of the Screen</param>
            <param name="height">New height of the Screen</param>
        </member>
        <member name="M:SwinGame.Core.ToggleFullScreen">
            <summary>
            Switches the application to full screen or back from full screen to
            windowed. Develop your game as a Windowed application until you are sure
            it works, then use this to toggle to fullscreen. It can be difficult to
            exit out if the game crashes while in full screen.
            </summary>
        </member>
        <member name="M:SwinGame.Core.RefreshScreen(System.Int32)">
            <summary>
            Draws the current drawing to the screen. This must be called to display
            anything to the screen. This will draw all drawing operations, as well
            as the text being entered by the user.
            </summary>
            <param name="TargetFPS">The target framerate, the API will delay if needed
             to ensure that this framerate is not exceeded.</param>
        </member>
        <member name="M:SwinGame.Core.RefreshScreen">
            <summary>
            Draws the current drawing to the screen. This must be called to display
            anything to the screen. This will draw all drawing operations, as well
            as the text being entered by the user. This does not limit the frame
            rate.
            </summary>
        </member>
        <member name="M:SwinGame.Core.TakeScreenshot(System.String)">
            <summary>
            Saves the current screen a bitmap file. The file will be saved into the
            current directory.
            </summary>
            <param name="basename">The base name for the screen shot</param>
        </member>
        <member name="M:SwinGame.Core.ScreenWidth">
            <summary>
            Gets the Screen's Width
            </summary>
            <returns>The Screen Width</returns>
        </member>
        <member name="M:SwinGame.Core.ScreenHeight">
            <summary>
            Gets the Screen's Height
            </summary>
            <returns>The Screen Height</returns>
        </member>
        <member name="M:SwinGame.Core.GetColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the Color when the user enters the amount of red, green, blue and alpha
            </summary>
            <param name="red">The amount of red (0 - 255)</param>
            <param name="green">The amount of green (0 - 255)</param>
            <param name="blue">The amount of blue (0 - 255)</param>
            <param name="alpha">The amount of alpha (0 - 255)</param>
            <returns>Color</returns>
        </member>
        <member name="M:SwinGame.Core.GetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the Color when the user enters the amount of red, green and blue
            </summary>
            <param name="red">The amount of red (0 - 255)</param>
            <param name="green">The amount of green (0 - 255)</param>
            <param name="blue">The amount of blue (0 - 255)</param>
            <returns>Color</returns>
        </member>
        <member name="M:SwinGame.Core.GetRGBFloatColor(System.Single,System.Single,System.Single)">
            <summary>
            Gets a Color from a floating point value for Red, Green, and Blue. A value
            of 1 indicates full use of that color component. So GetRGBFloatColor(1.0, 0, 0)
            will return Red.
            </summary>
            <param name="red">Floating value representing the red component (between 0 and 1)</param>
            <param name="green">Floating value representing the green component (between 0 and 1)</param>
            <param name="blue">Floating value representing the blue component (between 0 and 1)</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Core.GetHSBColor(System.Single,System.Single,System.Single)">
            <summary>
            Gets a color from a combination of hue, saturation, and brightness. This is great
            if you want to transition from one color (hue) to another, say from green to
            red.
            </summary>
            <param name="hue">the color or shade, ranges from 0 to 1</param>
            <param name="saturation">the saturation of the color, ranges from 0 to 1</param>
            <param name="brightness">the brightness of the color, ranges from 0 to 1</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Core.GetFramerate">
            <summary>
            Returns the average framerate for the last 10 frames as an integer.
            </summary>
            <returns>The current average framerate</returns>
        </member>
        <member name="M:SwinGame.Core.GetTicks">
            <summary>
            Gets the number of milliseconds that have passed. This can be used to
            determine timing operations, such as updating the game elements.
            </summary>
            <returns>The number of milliseconds passed</returns>
        </member>
        <member name="M:SwinGame.Core.Sleep(System.UInt32)">
            <summary>
            Puts the process to sleep for a specified number of
            milliseconds. This can be used to add delays into your
            game.
            </summary>
            <param name="time">The number of milliseconds to sleep</param>
        </member>
        <member name="F:SwinGame.Core.appPath">
            <summary>
            The path to the application... used in loading resources
            </summary>
        </member>
        <member name="M:SwinGame.Core.GetPathToResource(System.String,SwinGame.ResourceKind)">
            <summary>
            Gets the resource to an image, sound, font or other type of resource
            
            Entering ResourceKind.None into the kind parameters makes this function
            look inside the base resource folder, while entering either, font, image
            or sound, will make this function look inside their respective folders, 
            image, font and sound folders.
            </summary>
            <param name="filename">filename that you need to get the path of</param>
            <param name="kind">The type of resource it is</param>
            <returns>A Path to the Resource</returns>
        </member>
        <member name="M:SwinGame.Core.GetPathToResource(System.String)">
            <summary>
            Gets the Path to a Resource in the base Resource folder.
            </summary>
            <param name="filename">filename that you need to get the path of</param>
            <returns>A Path to the Resource</returns>
        </member>
        <member name="M:SwinGame.Core.Cos(System.Single)">
            <summary>
            Gets the Cos of an angle
            </summary>
            <param name="angle">Angle in degrees</param>
            <returns>Cos</returns>
        </member>
        <member name="M:SwinGame.Core.Sin(System.Single)">
            <summary>
            Gets the Sin of an angle
            </summary>
            <param name="angle">Angle in degrees</param>
            <returns>Sin</returns>
        </member>
        <member name="M:SwinGame.Core.Tan(System.Single)">
            <summary>
            Gets the Tan of an angle
            </summary>
            <param name="angle">Angle in degrees</param>
            <returns>Tan</returns>
        </member>
        <member name="M:SwinGame.Core.CreateTimer">
            <summary>
            Creates a new Timer that you can start, stop, read, etc. Timers
            are useful for implementing time based movement rather than framerate
            based movement. You must free the timer when you are finished with
            it.
            </summary>
            <returns>A new timer</returns>
        </member>
        <member name="M:SwinGame.Core.FreeTimer(SwinGame.Timer)">
            <summary>
            Free a timer that you have created. Ensure that you only free the timer
            once, as freeing it multiple times can cause the program to crash.
            </summary>
            <param name="toFree">The timer to be freed</param>
        </member>
        <member name="M:SwinGame.Core.StartTimer(SwinGame.Timer)">
            <summary>
            Start the timer ticking. The timer's value will now increase with time.
            </summary>
            <param name="toStart">the timer to start</param>
        </member>
        <member name="M:SwinGame.Core.StopTimer(SwinGame.Timer)">
            <summary>
            Stop a timer. If the timer is restarted it will now reset back
            to 0 ticks.
            </summary>
            <param name="toStop">The timer to stop</param>
        </member>
        <member name="M:SwinGame.Core.PauseTimer(SwinGame.Timer)">
            <summary>
            Pause the timer. Reading the timer will now give the same value until
            the timer is unpaused, at which point it will continue from where
            it is up to.
            </summary>
            <param name="toPause"> the timer to pause</param>
        </member>
        <member name="M:SwinGame.Core.UnpauseTimer(SwinGame.Timer)">
            <summary>
            Resume a paused timer. The timer will continue from where it was up to
            when it was paused.
            </summary>
            <param name="toUnpause">The timer to resume</param>
        </member>
        <member name="M:SwinGame.Core.ResumeTimer(SwinGame.Timer)">
            <summary>
            Resume a paused timer. The timer will continue from where it was up to
            when it was paused.
            </summary>
            <param name="toUnpause">The timer to resume</param>
        </member>
        <member name="M:SwinGame.Core.GetTimerTicks(SwinGame.Timer)">
            <summary>
            Get the number of ticks (milliseconds) that have passed since
            the timer was started. When paused this will return the same 
            value until unpaused.
            </summary>
            <param name="toGet">the timer to get the value of</param>
            <returns></returns>
        </member>
        <member name="T:SwinGame.Text">
            <summary>
            Text and Font Class
            </summary>
        </member>
        <member name="M:SwinGame.Text.LoadFont(System.String,System.Int32)">
            <summary>
            Loads a font from file with the specified side. Fonts must be freed using
            the FreeFont routine once finished with. Once the font is loaded you
            can set its style using SetFontStyle. Fonts are then used to draw and
            measure text in your programs.
            </summary>
            <param name="fontName">The name of the font file to load from the file system</param>
            <param name="size">The point size of the font</param>
            <returns>The font loaded</returns>
        </member>
        <member name="M:SwinGame.Text.SetFontStyle(SwinGame.Font,SwinGame.FontStyle)">
            <summary>
            Sets the style of the passed in font. This is time consuming, so load
            fonts multiple times and set the style for each if needed.
            </summary>
            <param name="font">The font to set the style of</param>
            <param name="style">The new style for the font, values can be read together</param>
        </member>
        <member name="M:SwinGame.Text.FreeFont(SwinGame.Font)">
            <summary>
            Free a loaded font.
            </summary>
            <param name="fontToFree">The Font to free</param>
        </member>
        <member name="M:SwinGame.Text.DrawText(SwinGame.Bitmap,System.String,System.Drawing.Color,SwinGame.Font,System.Int32,System.Int32)">
            <summary>
            Draws texts to the destination bitmap. Drawing text is a slow operation,
            and drawing it to a bitmap, then drawing the bitmap to screen is a
            good idea. Do not use this technique if the text changes frequently.
            </summary>
            <param name="dest">The destination bitmap - not optimised!</param>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
        </member>
        <member name="M:SwinGame.Text.DrawText(SwinGame.Bitmap,System.String,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws texts to the destination bitmap.
            </summary>
            <param name="dest">The destination bitmap - not optimised!</param>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
        </member>
        <member name="M:SwinGame.Text.DrawText(SwinGame.Bitmap,System.String,System.Drawing.Color,SwinGame.Font,SwinGame.Point2D)">
            <summary>
            Draws texts to the destination bitmap. Drawing text is a slow operation,
            and drawing it to a bitmap, then drawing the bitmap to screen is a
            good idea. Do not use this technique if the text changes frequently.
            </summary>
            <param name="dest">The destination bitmap - not optimised!</param>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="pnt">The point to draw the text at (x,y)</param>
        </member>
        <member name="M:SwinGame.Text.DrawText(System.String,System.Drawing.Color,SwinGame.Font,System.Single,System.Single)">
            <summary>
            Draws texts to the screen. Drawing text is a slow operation,
            and drawing it to a bitmap, then drawing the bitmap to screen is a
            good idea. Do not use this technique if the text changes frequently.
            </summary>
            <param name="theText">The text to be drawn onto the screen</param>
            <param name="textColor">The color to draw the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
        </member>
        <member name="M:SwinGame.Text.DrawText(System.String,System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Draws texts to the screen.
            </summary>
            <param name="theText">The text to be drawn onto the screen</param>
            <param name="textColor">The color to draw the text</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
        </member>
        <member name="M:SwinGame.Text.DrawText(System.String,System.Drawing.Color,SwinGame.Font,SwinGame.Point2D)">
            <summary>
            Draws texts to the screen. Drawing text is a slow operation,
            and drawing it to a bitmap, then drawing the bitmap to screen is a
            good idea. Do not use this technique if the text changes frequently.
            </summary>
            <param name="theText">The text to be drawn onto the screen</param>
            <param name="textColor">The color to draw the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="pnt">The point to draw the text at (x,y)</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextLines(System.String,System.Drawing.Color,System.Drawing.Color,SwinGame.Font,SwinGame.FontAlignment,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws multiple lines of text to the screen. This is a very
            slow operation, so if the text is not frequently changing save it to a
            bitmap and draw that bitmap to screen instead.
            </summary>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="backColor">The color to draw behind the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="align">The alignment for the text in the region</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
            <param name="w">The width of the region to draw inside</param>
            <param name="h">The height of the region to draw inside</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextLines(System.String,System.Drawing.Color,System.Drawing.Color,SwinGame.Font,SwinGame.FontAlignment,System.Drawing.Rectangle)">
            <summary>
            Draws multiple lines of text to the screen. This is a very
            slow operation, so if the text is not frequently changing save it to a
            bitmap and draw that bitmap to screen instead.
            </summary>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="backColor">The color to draw behind the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="align">The alignment for the text in the region</param>
            <param name="rect">The rectangle to draw the text into.</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextLines(SwinGame.Bitmap,System.String,System.Drawing.Color,System.Drawing.Color,SwinGame.Font,SwinGame.FontAlignment,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws multiple lines of text to the destination bitmap. This is a very
            slow operation, so if the text is not frequently changing save it to a
            bitmap and draw that bitmap to screen instead.
            </summary>
            <param name="dest">The destination bitmap - not optimised!</param>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="backColor">The color to draw behind the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="align">The alignment for the text in the region</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
            <param name="w">The width of the region to draw inside</param>
            <param name="h">The height of the region to draw inside</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextLines(SwinGame.Bitmap,System.String,System.Drawing.Color,System.Drawing.Color,SwinGame.Font,SwinGame.FontAlignment,System.Drawing.Rectangle)">
            <summary>
            Draws multiple lines of text to the destination bitmap. This is a very
            slow operation, so if the text is not frequently changing save it to a
            bitmap and draw that bitmap to screen instead.
            </summary>
            <param name="dest">The destination bitmap - not optimised!</param>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="backColor">The color to draw behind the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="align">The alignment for the text in the region</param>
            <param name="rect">The rectangle to draw the text into.</param>
        </member>
        <member name="M:SwinGame.Text.TextWidth(System.String,SwinGame.Font)">
            <summary>
            Calculates the width of a string when drawn with a given font.
            </summary>
            <param name="theText">The text to measure</param>
            <param name="theFont">The font used to draw the text</param>
            <returns>The width of the drawing in pixels</returns>
        </member>
        <member name="M:SwinGame.Text.TextHeight(System.String,SwinGame.Font)">
            <summary>
            Calculates the height of a string when drawn with a given font.
            </summary>
            <param name="theText">The text to measure</param>
            <param name="theFont">The font used to draw the text</param>
            <returns>The height of the drawing in pixels</returns>
        </member>
        <member name="M:SwinGame.Text.DrawFramerate(System.Int32,System.Int32,SwinGame.Font)">
            <summary>
            Draws the frame rate using the specified font at the indicated x, y.
            Draws the FPS (min, max) current average
            </summary>
            <param name="x">The x location to draw to</param>
            <param name="y">The y location to draw to</param>
            <param name="theFont">The font used to draw the framerate</param>
        </member>
        <member name="M:SwinGame.Text.DrawFramerate(System.Int32,System.Int32)">
            <summary>
            Draws the frame rate using the specified font at the indicated x, y.
            Draws the FPS (min, max) current average
            </summary>
            <param name="x">The x location to draw to</param>
            <param name="y">The y location to draw to</param>
        </member>
        <member name="M:SwinGame.Text.DrawFramerate(SwinGame.Point2D,SwinGame.Font)">
            <summary>
            Draws the frame rate using the specified font at the indicated x, y.
            Draws the FPS (min, max) current average
            </summary>
            <param name="pnt">The point to draw at (x,y)</param>
            <param name="theFont">The font used to draw the framerate</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextOnScreen(System.String,System.Drawing.Color,SwinGame.Font,System.Int32,System.Int32)">
            <summary>
            Draws texts to the screen. Drawing text is a slow operation,
            and drawing it to a bitmap, then drawing the bitmap to screen is a
            good idea. Do not use this technique if the text changes frequently.
            </summary>
            <param name="theText">The text to be drawn onto the screen</param>
            <param name="textColor">The color to draw the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextOnScreen(System.String,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws texts to the screen.
            </summary>
            <param name="theText">The text to be drawn onto the screen</param>
            <param name="textColor">The color to draw the text</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextOnScreen(System.String,System.Drawing.Color,SwinGame.Font,SwinGame.Point2D)">
            <summary>
            Draws texts to the screen. Drawing text is a slow operation,
            and drawing it to a bitmap, then drawing the bitmap to screen is a
            good idea. Do not use this technique if the text changes frequently.
            </summary>
            <param name="theText">The text to be drawn onto the screen</param>
            <param name="textColor">The color to draw the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="point">The Top left Position of the Text to be drawn</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextLinesOnScreen(System.String,System.Drawing.Color,System.Drawing.Color,SwinGame.Font,SwinGame.FontAlignment,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws multiple lines of text to the screen. This is a very
            slow operation, so if the text is not frequently changing save it to a
            bitmap and draw that bitmap to screen instead.
            </summary>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="backColor">The color to draw behind the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="align">The alignment for the text in the region</param>
            <param name="x">The x location to draw the text at (top left)</param>
            <param name="y">The y location to draw the text at (top left)</param>
            <param name="w">The width of the region to draw inside</param>
            <param name="h">The height of the region to draw inside</param>
        </member>
        <member name="M:SwinGame.Text.DrawTextLinesOnScreen(System.String,System.Drawing.Color,System.Drawing.Color,SwinGame.Font,SwinGame.FontAlignment,System.Drawing.Rectangle)">
            <summary>
            Draws multiple lines of text to the screen. This is a very
            slow operation, so if the text is not frequently changing save it to a
            bitmap and draw that bitmap to screen instead.
            </summary>
            <param name="theText">The text to be drawn onto the destination</param>
            <param name="textColor">The color to draw the text</param>
            <param name="backColor">The color to draw behind the text</param>
            <param name="theFont">The font used to draw the text</param>
            <param name="align">The alignment for the text in the region</param>
            <param name="rectangle">The Rectangle the Text will be within</param>
        </member>
        <member name="T:SwinGame.Graphics">
            <summary>
            The Graphics Class enables most of the Drawing features of SGSDK
            </summary>
        </member>
        <member name="M:SwinGame.Graphics.CreateBitmap(System.Int32,System.Int32)">
            <summary>
            Create a blank bitmap of the given size. This is useful for caching drawing, 
            for slower drawing operations.Most of the Drawing routines provide an 
            option to specify what bitmap to draw onto.
            </summary>
            <param name="width">Width of a bitmap</param>
            <param name="height">Height of a bitmap</param>
            <returns>New bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.OptimiseBitmap(SwinGame.Bitmap)">
            <summary>
            Optimise the specified bitmap. This will make the bitmap faster to be drawn to the screen
            </summary>
            <param name="surface">Bitmap to optimise</param>
        </member>
        <member name="M:SwinGame.Graphics.LoadBitmap(System.String)">
            <summary>
            Load the specified image file. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="pathToBitmap">Path to the image file</param>
            <returns>New bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.LoadBitmap(System.String,System.Boolean,System.Drawing.Color)">
            <summary>
            Load the specified image file with a transparent color. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="pathToBitmap">Path to the image file</param>
            <param name="transparent">True if this image has transparent pixels</param>
            <param name="transparentColor">Color of the transparent pixels</param>
            <returns>New bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.LoadTransparentBitmap(System.String,System.Drawing.Color)">
            <summary>
            Load an image with transparency. Use the GetPathToResource methods from Core to
            ensure that you load the file in a platform neutral way, enabling your game
            to run on Windows, Mac, and Linux.
            </summary>
            <param name="pathToBitmap">Path to the image file</param>
            <param name="transparentColor">Color of the transparent pixels</param>
            <returns>New bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.FreeBitmap(SwinGame.Bitmap)">
            <summary>
            Frees a Bitmap From Memory. You need to ensure that all bitmaps
            that you load are freed by the end of the game. This is usually done
            when the program exits.
            </summary>
            <param name="bitmapToFree">Bitmap to free</param>
        </member>
        <member name="M:SwinGame.Graphics.GetBitmapWidth(SwinGame.Bitmap)">
            <summary>
            Get the specified bitmap's width
            </summary>
            <param name="targetbitmap">Target bitmap</param>
            <returns>Width of the bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.GetBitmapHeight(SwinGame.Bitmap)">
            <summary>
            Get the specified bitmap's height
            </summary>
            <param name="targetbitmap">Target bitmap</param>
            <returns>Height of the bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.ClearSurface(SwinGame.Bitmap,System.Drawing.Color)">
            <summary>
            Clear the bitmap with the specified color.
            </summary>
            <param name="dest">Bitmap to clear</param>
            <param name="toColour">The color used to clear</param>
        </member>
        <member name="M:SwinGame.Graphics.ClearSurface(SwinGame.Bitmap)">
            <summary>
            Clear the bitmap to black
            </summary>
            <param name="dest">Bitmap to clear</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmap(SwinGame.Bitmap,SwinGame.Bitmap,System.Int32,System.Int32)">
            <summary>
            Draw bitmap to the specified bitmap. You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">Bitmap to draw on</param>
            <param name="bitmapToDraw">Bitmap to draw</param>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmap(SwinGame.Bitmap,SwinGame.Bitmap,SwinGame.Point2D)">
            <summary>
            Draw bitmap to the specified bitmap. You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">Bitmap to draw on</param>
            <param name="bitmapToDraw">Bitmap to draw</param>
            <param name="position">Position to Draw to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmap(SwinGame.Bitmap,SwinGame.Point2D)">
            <summary>
            Draw bitmap to the specified bitmap. You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="bitmapToDraw">Bitmap to draw</param>
            <param name="position">Position to Draw to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPart(SwinGame.Bitmap,SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto another bitmap (dest), this is faster than drawing 
            the whole bitmap
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="bitmapToDraw">The bitmap to be drawn onto the destination</param>
            <param name="srcX">The x offset to the area to copy in bitmapToDraw</param>
            <param name="srcY">The y offset to the area to copy in bitmapToDraw</param>
            <param name="srcW">The width of the area to copy</param>
            <param name="srcH">The height of the area to copy</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPart(SwinGame.Bitmap,SwinGame.Bitmap,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto another bitmap (dest), this is faster than drawing 
            the whole bitmap
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="bitmapToDraw">The bitmap to be drawn onto the destination</param>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPart(SwinGame.Bitmap,SwinGame.Bitmap,System.Drawing.Rectangle,SwinGame.Point2D)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto another bitmap (dest), this is faster than drawing 
            the whole bitmap
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="bitmapToDraw">The bitmap to be drawn onto the destination</param>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="position">The x,y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmap(SwinGame.Bitmap,System.Single,System.Single)">
            <summary>
            Draws one bitmap (bitmapToDraw) onto the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="bitmapToDraw">The bitmap to be drawn onto the screen</param>
            <param name="x">The x location to draw the bitmap to</param>
            <param name="y">The y location to draw the bitmap to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPart(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto the screen, x and y are in game 
            coordinates not screen coordinates, this is faster than DrawBitmap
            if you don't want all of the bitmap to be shown
            </summary>
            <param name="bitmapToDraw">The bitmap to be drawn onto the screen</param>
            <param name="srcX">The x offset to the area to copy in bitmapToDraw</param>
            <param name="srcY">The y offset to the area to copy in bitmapToDraw</param>
            <param name="srcW">The width of the area to copy</param>
            <param name="srcH">The height of the area to copy</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPart(SwinGame.Bitmap,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto the screen, x and y are in game 
            coordinates not screen coordinates, this is faster than DrawBitmap
            if you don't want all of the bitmap to be shown
            </summary>
            <param name="bitmapToDraw">The bitmap to be drawn onto the screen</param>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="x">The x location to draw the bitmap part to</param>
            <param name="y">The y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPart(SwinGame.Bitmap,System.Drawing.Rectangle,SwinGame.Point2D)">
            <summary>
            Draws part of a bitmap (bitmapToDraw) onto the screen, x and y are in game 
            coordinates not screen coordinates, this is faster than DrawBitmap
            if you don't want all of the bitmap to be shown
            </summary>
            <param name="bitmapToDraw">The bitmap to be drawn onto the screen</param>
            <param name="source">The possition and size of the bitmapToDraw</param>
            <param name="position">The x,y location to draw the bitmap part to</param>
        </member>
        <member name="M:SwinGame.Graphics.GetPixel(SwinGame.Bitmap,System.Int32,System.Int32)">
            <summary>
            Get the color of the pixel in the bitmap.
            </summary>
            <param name="from">the bitmap to get the color from</param>
            <param name="x">the x location of the pixel</param>
            <param name="y">the y location of the pixel</param>
            <returns>the color of the pixel in the bitmap at location x,y</returns>
        </member>
        <member name="M:SwinGame.Graphics.GetPixelFromScreen(System.Int32,System.Int32)">
            <summary>
            Get the color of a pixel on the screen.
            </summary>
            <param name="x">the x location of the pixel</param>
            <param name="y">the y location of the pixel</param>
            <returns>the color of the pixel at the x,y location</returns>
        </member>
        <member name="M:SwinGame.Graphics.DrawPixel(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draws a pixel onto the destination bitmap, You will often use 
            the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the pixel</param>
            <param name="x">The x location to draw the pixel at</param>
            <param name="y">The y location to draw the pixel at</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle on the destination bitmap, You will often use the 
            bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the rectangle</param>
            <param name="filled">True to draw a filled rectangle, false for outline</param>
            <param name="xPos">The x location to draw the rectangle at</param>
            <param name="yPos">The y location to draw the rectangle at</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillRectangle(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled rectangle on the destination bitmap, You will often use 
            the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the rectangle</param>
            <param name="xPos">The x location to draw the rectangle at</param>
            <param name="yPos">The y location to draw the rectangle at</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the outline of a rectangle on the destination bitmap, You will often use 
            the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the rectangle</param>
            <param name="xPos">The x location to draw the rectangle at</param>
            <param name="yPos">The y location to draw the rectangle at</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawLine(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on the destination bitmap, You will often use the 
            bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the line</param>
            <param name="xPosStart">The x location to start the line at</param>
            <param name="yPosStart">The y location to start the line at</param>
            <param name="xPosEnd">The x location to end the line at</param>
            <param name="yPosEnd">The y location to end the line at</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawHorizontalLine(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a horizontal line on the destination bitmap, You will often use the 
            bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the line</param>
            <param name="y">The y location of the line</param>
            <param name="x1">The starting x value of the line</param>
            <param name="x2">The starting y value of the line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawVerticalLine(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a vertical line on the destination bitmap, You will often use the 
            bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the line</param>
            <param name="x">The x location of the line</param>
            <param name="y1">The starting y value of the line</param>
            <param name="y2">The ending y value of the line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle centered on a given x, y locationon on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the circle</param>
            <param name="filled">True to draw a filled circle, false for outline</param>
            <param name="xc">The x location of the center of the circle</param>
            <param name="yc">The y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a circle centered on a given x, y locationon on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the circle</param>
            <param name="filled">True to draw a filled circle, false for outline</param>
            <param name="position">The x,y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle outline centered on a given x, y location on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the circle</param>
            <param name="xc">The x location of the center of the circle</param>
            <param name="yc">The y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(SwinGame.Bitmap,System.Drawing.Color,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a circle outline centered on a given x, y location on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the circle</param>
            <param name="position">The x,y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillCircle(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled circle centered on a given x, y location on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the circle</param>
            <param name="xc">The x location of the center of the circle</param>
            <param name="yc">The y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a ellipse within a given rectangle on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the ellipse</param>
            <param name="filled">True to draw a filled ellipse, false for outline</param>
            <param name="xPos">The x location of the top left of the ellipse</param>
            <param name="yPos">The y location of the top left of the ellipse</param>
            <param name="width">The width of the ellipse</param>
            <param name="height">The height of the ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Draws a ellipse within a given rectangle on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the ellipse</param>
            <param name="filled">True to draw a filled ellipse, false for outline</param>
            <param name="source">The locations and size to draw the ellipse to</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a ellipse outline within a given rectangle on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the ellipse</param>
            <param name="xPos">The x location of the top left of the ellipse</param>
            <param name="yPos">The y location of the top left of the ellipse</param>
            <param name="width">The width of the ellipse</param>
            <param name="height">The height of the ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(SwinGame.Bitmap,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a ellipse outline within a given rectangle on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the ellipse</param>
            <param name="source">The locations and size to draw the ellipse to</param>
        </member>
        <member name="M:SwinGame.Graphics.FillEllipse(SwinGame.Bitmap,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled ellipse within a given rectangle on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the ellipse</param>
            <param name="xPos">The x location of the top left of the ellipse</param>
            <param name="yPos">The y location of the top left of the ellipse</param>
            <param name="width">The width of the ellipse</param>
            <param name="height">The height of the ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.FillEllipse(SwinGame.Bitmap,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a filled ellipse within a given rectangle on the destination bitmap, 
            You will often use the bitmap from CreateBitmap to draw on.
            </summary>
            <param name="dest">The destination bitmap</param>
            <param name="theColour">The color to draw the ellipse</param>
            <param name="source">The locations and size to draw the ellipse to</param>
        </member>
        <member name="M:SwinGame.Graphics.ClearScreen(System.Drawing.Color)">
            <summary>
            Clears the surface of the screen to the passed in color, it is usefull to call this
            every time you call RefreshScreen
            </summary>
            <param name="toColour">The colour to clear the bitmap to</param>
        </member>
        <member name="M:SwinGame.Graphics.ClearScreen">
            <summary>
            Clears the screen to Black, it is usefull to call this
            every time you call RefreshScreen
            </summary>
        </member>
        <member name="M:SwinGame.Graphics.DrawPixel(System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Draws a pixel onto the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the pixel</param>
            <param name="x">The x location to draw the pixel at</param>
            <param name="y">The y location to draw the pixel at</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawPixel(SwinGame.Bitmap,System.Drawing.Color,SwinGame.Point2D)">
            <summary>
            Draws a pixel onto the screen at the given location
            </summary>
            <param name="dest">Destination Bitmap</param>
            <param name="theColor">Color of the Pixel</param>
            <param name="position">Position of Pixel</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawPixel(System.Drawing.Color,SwinGame.Point2D)">
            <summary>
            Draws a pixel onto the screen at the given location
            </summary>
            <param name="theColor"></param>
            <param name="position"></param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(System.Drawing.Color,System.Boolean,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the rectangle</param>
            <param name="filled">True to draw a filled rectangle, false for outline</param>
            <param name="xPos">The x location to draw the rectangle at</param>
            <param name="yPos">The y location to draw the rectangle at</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(System.Drawing.Color,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws the outline of a rectangle on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the rectangle</param>
            <param name="xPos">The x location to draw the rectangle at</param>
            <param name="yPos">The y location to draw the rectangle at</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Draws a Rectangle on a destination bitmap with the specified Color
            </summary>
            <param name="dest">Destination Bitmap</param>
            <param name="theColor">Color of the Recangle</param>
            <param name="filled">Filled Rectangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(SwinGame.Bitmap,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a Rectangle on a destination bitmap with the specified Color
            </summary>
            <param name="dest">Destination Bitmap</param>
            <param name="theColor">Color of the Recangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(System.Drawing.Color,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Draws a Rectangle on a destination bitmap with the specified Color
            </summary>
            <param name="theColor">Color of the Recangle</param>
            <param name="filled">Filled Rectangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a Rectangle on a destination bitmap with the specified Color
            </summary>
            <param name="theColor">Color of the Recangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillRectangle(System.Drawing.Color,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws a filled rectangle on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the rectangle</param>
            <param name="xPos">The x location to draw the rectangle at</param>
            <param name="yPos">The y location to draw the rectangle at</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a filled rectangle on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">Color of the Rectangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillRectangle(SwinGame.Bitmap,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a filled rectangle on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="dest">Destination Bitmap</param>
            <param name="theColor">Color of the Rectangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawLine(System.Drawing.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the line</param>
            <param name="xPosStart">The x location to start the line at</param>
            <param name="yPosStart">The y location to start the line at</param>
            <param name="xPosEnd">The x location to end the line at</param>
            <param name="yPosEnd">The y location to end the line at</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawLine(SwinGame.Bitmap,System.Drawing.Color,SwinGame.LineSegment)">
            <summary>
            Draws a line on the screen at the given location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="dest">Destination Bitmap</param>
            <param name="theColor">Color of the Line</param>
            <param name="line">Line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawLine(System.Drawing.Color,SwinGame.LineSegment)">
            <summary>
            Draws a line on the screen at the given location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">Color of the Line</param>
            <param name="line">Line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawHorizontalLine(System.Drawing.Color,System.Single,System.Single,System.Single)">
            <summary>
            Draws a horizontal line on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the line</param>
            <param name="y">The y location of the line</param>
            <param name="x1">The starting x value of the line</param>
            <param name="x2">The ending x value of the line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawVerticalLine(System.Drawing.Color,System.Single,System.Single,System.Single)">
            <summary>
            Draws a vertical line on the screen at the give location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the line</param>
            <param name="x">The color to draw the line</param>
            <param name="y1">The starting y value of the line</param>
            <param name="y2">The ending y value of the line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(System.Drawing.Color,System.Boolean,System.Single,System.Single,System.Int32)">
            <summary>
            Draws a circle centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the circle</param>
            <param name="filled">True to draw a filled circle, false for outline</param>
            <param name="xc">The x location of the center of the circle</param>
            <param name="yc">The y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(System.Drawing.Color,System.Boolean,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a circle centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the circle</param>
            <param name="filled">True to draw a filled circle, false for outline</param>
            <param name="position">The x,y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(System.Drawing.Color,System.Single,System.Single,System.Int32)">
            <summary>
            Draws a circle outline centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the circle</param>
            <param name="xc">The x location of the center of the circle</param>
            <param name="yc">The y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircle(System.Drawing.Color,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a circle outline centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the circle</param>
            <param name="position">The x,y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillCircle(System.Drawing.Color,System.Single,System.Single,System.Int32)">
            <summary>
            Draws a filled circle centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColour">The color to draw the circle</param>
            <param name="xc">The x location of the center of the circle</param>
            <param name="yc">The y location of the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillCircle(SwinGame.Bitmap,System.Drawing.Color,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a filled circle centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="dest">Destination Bitmap</param>
            <param name="theColor">Color of the Circle</param>
            <param name="point">Position of the Circle</param>
            <param name="radius">Radius of the Circle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillCircle(System.Drawing.Color,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a filled circle centered on a given x, y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">Color of the Circle</param>
            <param name="position">Position of the Circle</param>
            <param name="radius">Radius of the Circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(System.Drawing.Color,System.Boolean,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws a ellipse within a given rectangle on the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the ellipse</param>
            <param name="filled">True to draw a filled ellipse, false for outline</param>
            <param name="xPos">The x location of the top left of the ellipse</param>
            <param name="yPos">The y location of the top left of the ellipse</param>
            <param name="width">The width of the ellipse</param>
            <param name="height">The height of the ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(System.Drawing.Color,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Draws a ellipse within a given rectangle on the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the ellipse</param>
            <param name="filled">True to draw a filled ellipse, false for outline</param>
            <param name="source">The location and size of the ellipse to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(System.Drawing.Color,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws a ellipse outline within a given rectangle on the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the ellipse</param>
            <param name="xPos">The x,y location of the top left of the ellipse</param>
            <param name="yPos">The y location of the top left of the ellipse</param>
            <param name="width">The width and height of the ellipse</param>
            <param name="height">The height of the ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipse(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a ellipse outline within a given rectangle on the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the ellipse</param>
            <param name="source">The location and size of the ellipse to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.FillEllipse(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a filled ellipse within a given rectangle on the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the ellipse</param>
            <param name="source">The location and size of the ellipse to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.FillEllipse(System.Drawing.Color,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Draws a filled ellipse within a given rectangle on the screen, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="theColor">The color to draw the ellipse</param>
            <param name="xPos">The x location of the top left of the ellipse</param>
            <param name="yPos">The y location of the top left of the ellipse</param>
            <param name="width">The width of the ellipse</param>
            <param name="height">The height of the ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap)">
            <summary>
            Creates a sprites, and sets its first bitmap, this is only good for non-animating sprites
            </summary>
            <param name="startBitmap">The sprites first bitmap (index 0)</param>
            <returns>A new sprite with this bitmap as its first bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.FreeSprite(SwinGame.Sprite)">
            <summary>
            Frees a sprite, this does not free the sprite's bitmaps, which allows
            bitmaps to be shared between sprites. All created sprites need to be
            freed.
            </summary>
            <param name="spriteToFree">the sprite to free</param>
        </member>
        <member name="M:SwinGame.Graphics.AddBitmapToSprite(SwinGame.Sprite,SwinGame.Bitmap)">
            <summary>
            Sprites may contain multiple images. These images can be used for things
            line animation, facing, etc. This routine adds a bitmap to a sprite,
            returning the index of the added bitmap.
            </summary>
            <param name="spriteToAddTo">the sprite to add the bitmap to</param>
            <param name="bitmapToAdd">the bitmap to add to the sprite</param>
            <returns>the index of the added bitmap</returns>
        </member>
        <member name="M:SwinGame.Graphics.CurrentHeight(SwinGame.Sprite)">
            <summary>
            Returns the current height of the sprite
            </summary>
            <param name="sprite">The sprite to get the height of</param>
            <returns>The height of the sprite's current frame</returns>
        </member>
        <member name="M:SwinGame.Graphics.CurrentWidth(SwinGame.Sprite)">
            <summary>
            Returns the current width of the sprite
            </summary>
            <param name="sprite">The sprite to get the width of</param>
            <returns>The width of the sprite's current frame</returns>
        </member>
        <member name="M:SwinGame.Graphics.DrawSprite(SwinGame.Sprite)">
            <summary>
            Draws a sprite to the game screen
            </summary>
            <param name="spriteToDraw">The sprite to be drawn</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawSprite(SwinGame.Sprite,System.Int32,System.Int32)">
            <summary>
            Draw the sprite to the sccreen at an offset from its actual position.
            </summary>
            <param name="spriteToDraw">the sprite to draw</param>
            <param name="xOffset">the x offset for drawing the sprite</param>
            <param name="yOffset">the y offset for drawing the sprite</param>
        </member>
        <member name="M:SwinGame.Graphics.MoveSprite(SwinGame.Sprite,SwinGame.Vector)">
            <summary>
            Moves a sprite based on information in a movement vector
            </summary>
            <param name="spriteToMove">The sprite to move</param>
            <param name="movementVector">The vector containing the movement details</param>
        </member>
        <member name="M:SwinGame.Graphics.MoveSprite(SwinGame.Sprite)">
            <summary>
            Moves a sprite based on the movement vector that is associated
            with the sprite.
            </summary>
            <param name="toMove">The sprite to move</param>
        </member>
        <member name="M:SwinGame.Graphics.MoveSpriteTo(SwinGame.Sprite,System.Int32,System.Int32)">
            <summary>
            Moves a sprite to a given x,y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="spriteToMove">the sprite being moved</param>
            <param name="x">the new location of the sprite</param>
            <param name="y">the new location of the sprite</param>
        </member>
        <member name="M:SwinGame.Graphics.IsSpriteOffscreen(SwinGame.Sprite)">
            <summary>
            Determines if a sprite is off the screen
            </summary>
            <param name="theSprite">The sprite to check the position of</param>
            <returns>True if the sprite is off the screen</returns>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap,System.Boolean,System.Int32[],SwinGame.SpriteEndingAction,System.Int32,System.Int32)">
            <summary>
            Creates a new Sprite. This version allows you to chose if you want a multi cell bitmap 
            and pick the ending action
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="isMulti">set to true if the bitmap is a tileset</param>
            <param name="framesPerCell">framesPerCell sets howmany times each frame is drawn</param>
            <param name="endingAction">sets the ending action</param>
            <param name="width">The width of the Sprite</param>
            <param name="height">The height of the Sprite</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap,System.Boolean,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a new Sprite. This version allows you to chose if you want a multi cell bitmap
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="isMulti">set to true if the bitmap is a tileset</param>
            <param name="framesPerCell">framesPerCell sets howmany times each frame is drawn</param>
            <param name="width">The width of the Sprite</param>
            <param name="height">The height of the Sprite</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Sprite. This version allows you to pick the frames per cell
            </summary>
            <param name="startBitmap">StartBitmap</param>
            <param name="framesPerCell">Delay each frame</param>
            <param name="frames">number of Frames</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>Sprite</returns>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap[],System.Int32[],SwinGame.SpriteEndingAction)">
            <summary>
            Creates a new Sprite. This version allows you to set how many times each frame is drawn
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="framesPerCell">framesPerCell sets how many times each frame is drawn</param>
            <param name="endingAction">sets the ending action</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap[],System.Int32[])">
            <summary>
            Creates a new Sprite with an array of bitmaps
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="framesPerCell">framesPerCell sets howmany times each frame is drawn</param>
            <returns>A Sprite</returns>
        </member>
        <member name="M:SwinGame.Graphics.CreateSprite(SwinGame.Bitmap[],System.Int32,System.Int32)">
            <summary>
            Creates a Sprite with an array of bitmaps and the frames per cell
            </summary>
            <param name="startBitmap">Start Bitmap</param>
            <param name="framesPerCell">Delay per Frame</param>
            <param name="frames">Number of Frames</param>
            <returns>Sprite</returns>
        </member>
        <member name="M:SwinGame.Graphics.UpdateSpriteAnimation(SwinGame.Sprite)">
            <summary>
            Updates the Sprites Animation, this will move to the next frame in the sprite
            </summary>
            <param name="sprite">The Sprite</param>
        </member>
        <member name="M:SwinGame.Graphics.ReplayAnimation(SwinGame.Sprite)">
            <summary>
            Replays a Sprite's Animation, if it has stopped
            </summary>
            <param name="sprite">The Sprite</param>
        </member>
        <member name="M:SwinGame.Graphics.UpdateSprite(SwinGame.Sprite)">
            <summary>
            Updates the Sprites Animation and Movement
            </summary>
            <param name="sprite">The Sprite</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPartOnScreen(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws Part of a Bitmap On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="bitmapToDraw">Bitmap to Draw</param>
            <param name="srcX">Starting X on Bitmap</param>
            <param name="srcY">Starting Y on Bitmap</param>
            <param name="srcW">Width</param>
            <param name="srcH">Height</param>
            <param name="x">Screen X Position</param>
            <param name="y">Screen Y Position</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPartOnScreen(SwinGame.Bitmap,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Draws Part of a Bitmap On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="bitmapToDraw">Bitmap to Draw</param>
            <param name="source">The size of the bitmap to draw</param>
            <param name="x">Screen X Position</param>
            <param name="y">Screen Y Position</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapPartOnScreen(SwinGame.Bitmap,System.Drawing.Rectangle,SwinGame.Point2D)">
            <summary>
            Draws Part of a Bitmap On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="bitmapToDraw">Bitmap to Draw</param>
            <param name="source">The size of the bitmap to draw</param>
            <param name="position">Screen X,Y Position</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapOnScreen(SwinGame.Bitmap,System.Int32,System.Int32)">
            <summary>
            Draws a Bitmap, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="bitmapToDraw">Bitmap to draw</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawBitmapOnScreen(SwinGame.Bitmap,SwinGame.Point2D)">
            <summary>
            Draws a Bitmap, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="bitmapToDraw">The Bitmap to draw</param>
            <param name="position">The Position to draw the Bitmap</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawPixelOnScreen(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Draw a Pixel on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color of Pixel</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawPixelOnScreen(System.Drawing.Color,SwinGame.Point2D)">
            <summary>
            Draw a Pixel on the Screen, it will always draw to the Point
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">The Color of the Pixel</param>
            <param name="position">Position of the Pixel</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangleOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a Rectangle on Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangleOnScreen(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a Rectangle on Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">The Color of the Rectangle</param>
            <param name="filled">Filled Rectangle</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangleOnScreen(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draw a Rectangle on Screen
            This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">The Color of the Rectangle</param>
            <param name="source">The Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawRectangleOnScreen(System.Drawing.Color,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Draw a Rectangle on Screen
            This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">The Color of the Rectangle</param>
            <param name="filled">Filled Rectangle</param>
            <param name="source">The Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.FillRectangleOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Filled Rectangle on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Graphics.FillRectangleOnScreen(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a Filled Rectangle on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color of the Rectangle</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawLineOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Line on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="xPosStart">X Start Coordinate</param>
            <param name="yPosStart">Y Start Coordinate</param>
            <param name="xPosEnd">X End Coordinate</param>
            <param name="yPosEnd">Y End Coordinate</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawLineOnScreen(System.Drawing.Color,SwinGame.LineSegment)">
            <summary>
            Draws a Line on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color of the Line</param>
            <param name="line">The Line</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawHorizontalLineOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw Horizontal Line on Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="y">Y Position</param>
            <param name="x1">X Starting Coordinate</param>
            <param name="x2">X Ending Coordinate</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawVerticalLineOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Vertical Line on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="x">X Position</param>
            <param name="y1">Y Starting Coordinate</param>
            <param name="y2">Y Ending Coordinate</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircleOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Circle on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="xc">X Center Position</param>
            <param name="yc">Y Center Position</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircleOnScreen(System.Drawing.Color,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a Circle on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="position">The x, y location of the center of the circle</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircleOnScreen(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Circle on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="filled">If true the circle will be filled</param>
            <param name="xc">X Center Position</param>
            <param name="yc">Y Center Position</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawCircleOnScreen(System.Drawing.Color,System.Boolean,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a Circle on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="filled">If true the circle will be filled</param>
            <param name="position">The x, y location of the center of the circle</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SwinGame.Graphics.FillCircleOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Filled Circle On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="xc">X Center Position</param>
            <param name="yc">Y Center Position</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SwinGame.Graphics.FillCircleOnScreen(System.Drawing.Color,SwinGame.Point2D,System.Int32)">
            <summary>
            Draws a Filled Circle On Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color of the Circle</param>
            <param name="position">Position of the Circle</param>
            <param name="radius">Radius of the Circle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipseOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an Ellipse on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipseOnScreen(System.Drawing.Color,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Draws an Ellipse on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Ellipse Color</param>
            <param name="filled">Filled Ellipse</param>
            <param name="source">Rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipseOnScreen(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws an Ellipse on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor"></param>
            <param name="source"></param>
        </member>
        <member name="M:SwinGame.Graphics.DrawEllipseOnScreen(System.Drawing.Color,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an Ellipse on the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color of the Ellipse</param>
            <param name="filled">Filled Ellipse</param>
            <param name="x">X Coordinate</param>
            <param name="y">Y Coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Graphics.FillEllipseOnScreen(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a Filled Ellipse On the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color</param>
            <param name="x">X Position</param>
            <param name="y">Y Position</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Graphics.FillEllipseOnScreen(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Draws a Filled Ellipse On the Screen, it will always draw to x, y 
            regardless of the position of the camera. This is usefull for drawing 
            things like the user interface or overlays
            </summary>
            <param name="theColor">Color of the Ellipse</param>
            <param name="source">Ellipse</param>
        </member>
        <member name="M:SwinGame.Graphics.SetClip(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the clipping rectangle to the specified values. Any drawing outside of
            this area is ignored.
            </summary>
            <param name="x">X Position of clipping rectangle</param>
            <param name="y">Y Position of clipping rectangle</param>
            <param name="width">Width of clipping rectangle</param>
            <param name="height">Height of clipping rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.SetClip(System.Drawing.Rectangle)">
            <summary>
            Sets the clipping rectangle to the specified values. Any drawing outside of
            this area is ignored.
            </summary>
            <param name="rect">the clipping rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.SetClip(SwinGame.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Sets the clipping rectangle to the specified values. Any drawing outside of
            this area is ignored.
            </summary>
            <param name="bmp">Bitmap to clip</param>
            <param name="rect">the clipping rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.SetClip(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the clipping rectangle to the specified values. Any drawing outside of
            this area is ignored.
            </summary>
            <param name="bmp">The bitmap to clip drawing operations on</param>
            <param name="x">X Position of clipping rectangle</param>
            <param name="y">Y Position of clipping rectangle</param>
            <param name="width">Width of clipping rectangle</param>
            <param name="height">Height of clipping rectangle</param>
        </member>
        <member name="M:SwinGame.Graphics.ResetClip">
            <summary>
            Resets the clipping area to allow you to draw to the entire screen.
            </summary>
        </member>
        <member name="M:SwinGame.Graphics.ResetClip(SwinGame.Bitmap)">
            <summary>
            Resets the clipping area to allow you to draw to the entire screen.
            </summary>
            <param name="bmp">The bitmap to clip drawing operations on</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawTriangle(System.Drawing.Color,SwinGame.Triangle)">
            <summary>
            Draws the specified Triangle to the screen
            </summary>
            <param name="theColor">The color of the triangle</param>
            <param name="triangle">The triangle to be drawn, with game co-ordinates</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawTriangle(System.Drawing.Color,System.Boolean,SwinGame.Triangle)">
            <summary>
            Draws a triangle at the indicated location.
            </summary>
            <param name="theColor">the color of the triangle</param>
            <param name="filled">if true the triangle is drawn as a filled triangle, otherwise only the outline is drawn.</param>
            <param name="triangle">the triangle to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawTriangleOnScreen(System.Drawing.Color,SwinGame.Triangle)">
            <summary>
            Draws the specified Triangle to the screen
            </summary>
            <param name="theColor">The color of the triangle</param>
            <param name="triangle">The triangle to be drawn, with screen co-ordinates</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawTriangleOnScreen(System.Drawing.Color,System.Boolean,SwinGame.Triangle)">
            <summary>
            Draws the specified Triangle to the screen
            </summary>
            <param name="theColor">The color of the triangle</param>
            <param name="filled">If true the triangle is drawn as a filled triangle, otherwise only the outline is drawn.</param>
            <param name="triangle">The triangle to be drawn, with screen co-ordinates</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawTriangleOn(SwinGame.Bitmap,System.Drawing.Color,SwinGame.Triangle)">
            <summary>
            Draws a triangle onto a supplied bitmap.
            </summary>
            <param name="dest">the bitmap to draw onto</param>
            <param name="theColor">the color of the triangle</param>
            <param name="triangle">the triangle to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.DrawTriangleOn(SwinGame.Bitmap,System.Drawing.Color,System.Boolean,SwinGame.Triangle)">
            <summary>
            Draws a triangle onto a supplied bitmap.
            </summary>
            <param name="dest">the bitmap to draw onto</param>
            <param name="theColor">the color of the triangle</param>
            <param name="filled">If true the triangle is drawn as a filled triangle, otherwise only the outline is drawn.</param>
            <param name="triangle">the triangle to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.FillTriangle(System.Drawing.Color,SwinGame.Triangle)">
            <summary>
            Draws a filled triangle, with given game coordinates
            </summary>
            <param name="theColor">The color of the triangle</param>
            <param name="triangle">The triangle to be drawn, with game co-ordinates</param>
        </member>
        <member name="M:SwinGame.Graphics.FillTriangleOnScreen(System.Drawing.Color,SwinGame.Triangle)">
            <summary>
            Draws a filled Triangle to the screen
            </summary>
            <param name="theColor">The color of the triangle</param>
            <param name="triangle">The triangle to be drawn, with screen co-ordinates</param>
        </member>
        <member name="M:SwinGame.Graphics.FillTriangleOn(SwinGame.Bitmap,System.Drawing.Color,SwinGame.Triangle)">
            <summary>
            Draws a filled triangle onto a supplied bitmap.
            </summary>
            <param name="dest">the bitmap to draw onto</param>
            <param name="theColor">the color of the triangle</param>
            <param name="triangle">the triangle to draw</param>
        </member>
        <member name="M:SwinGame.Graphics.UpdateSprite(SwinGame.Sprite,System.Single)">
            <summary>
            Updates the sprite, the percentage indicates the
            percentage of a full update.
            </summary>
            <param name="spriteToUpdate">the sprite to update</param>
            <param name="pct">the percentage to update</param>
        </member>
        <member name="M:SwinGame.Graphics.UpdateSpriteAnimation(SwinGame.Sprite,System.Single)">
            <summary>
            Updates the sprite's animation, the percentage indicates the
            percentage of a full update.
            </summary>
            <param name="spriteToUpdate">the sprite to update</param>
            <param name="pct">the percentage to update</param>
        </member>
        <member name="M:SwinGame.Graphics.MakeBitmapOpaque(SwinGame.Bitmap)">
            <summary>
            Turn off alpha blending so that this bitmap can appear when
            drawn onto an already transparent bitmap.
            </summary>
            <param name="bmp">the bitmap to make opaque</param>
        </member>
        <member name="M:SwinGame.Graphics.MakeBitmapTransparent(SwinGame.Bitmap)">
            <summary>
            Turns alpha blending back on for a bitmap. This reverses the
            MakeOpaque process.
            </summary>
            <param name="bmp">The bitmap to make transparent</param>
        </member>
        <member name="M:SwinGame.Graphics.RotateZoom(SwinGame.Bitmap,System.Int32,System.Single)">
            <summary>
            Rotate and zoom the passed in bitmap, returning a new
            bitmap at the given rotation.
            </summary>
            <param name="deg">the amount to rotate (in degrees)</param>
            <param name="scale">the amount to scale the bitmap</param>
            <param name="source">the source bitmap to rotate and scale</param>
            <returns>The new bitmap, rotated and zoomed</returns>
        </member>
        <member name="M:SwinGame.Graphics.SetupBitmapForCollisions(SwinGame.Bitmap)">
            <summary>
            Sets up a bitmap so that collisions will work at a pixel level.
            This does not need to be called on loaded bitmaps, only on
            dynamically created bitmaps, and bitmaps created using
            rotate and zoom.
            </summary>
            <param name="bmp">The bitmap to setup collisions for</param>
        </member>
        <member name="T:SwinGame.Input">
            <summary>
            The Input class handles all Mouse and Keyboard Input related routines. Capable of detecting if a
            key or mouse button has been typed, is being held down, is currently up, this set of routines
            are extremely useful for user interaction within your games.
            </summary>
        </member>
        <member name="M:SwinGame.Input.GetMousePositionAsVector">
            <summary>
            Gets the current Mouse Position as a Vector, useful for finding out things such as if the mouse
            is hovering over a particular area of the screen.
            </summary>
            <returns>Vector representing the position of the mouse</returns>
        </member>
        <member name="M:SwinGame.Input.GetMousePosition">
            <summary>
            Gets the current Mouse Position as a Point2D, useful for finding out things such as if the mouse
            is hovering over a particular area of the screen.
            </summary>
            <returns>Point2D representing the Mouse Coordinates on the screen</returns>
        </member>
        <member name="M:SwinGame.Input.GetMouseMovement">
            <summary>
            Gets the Mouse Movement, useful for moving objects on the screen based on the movement of the
            mouse.
            </summary>
            <returns>Vector representing the movement of the mouse</returns>
        </member>
        <member name="M:SwinGame.Input.IsMouseDown(SwinGame.MouseButton)">
            <summary>
            This function checks if the specified mouse button is being clicked, this is useful for
            ingame buttons, you could use this function to find if the user had hit the left mouse button.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if the mouse button is being clicked</returns>
        </member>
        <member name="M:SwinGame.Input.IsMouseUp(SwinGame.MouseButton)">
            <summary>
            This function checks if the specified mouse button is not
            being clicked.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if the mouse button is not being clicked</returns>
        </member>
        <member name="M:SwinGame.Input.MouseWasClicked(SwinGame.MouseButton)">
            <summary>
            This functions checks if the mouse button specified has
            been clicked.
            </summary>
            <param name="button">Mouse button to check</param>
            <returns>True if the mouse button has been clicked</returns>
        </member>
        <member name="M:SwinGame.Input.StartReadingText(System.Drawing.Color,System.Int32,SwinGame.Font,System.Int32,System.Int32)">
            <summary>
            StartReadingText start the API reading a string values from the user.
            Entry is completed when the user presses enter, and aborted with escape.
            If the user aborts entry the result is an empty string. Text entry is
            updated as part of ProcessEvents, and is drawn to the screen as part of
            the RefreshScreen call.
            </summary>
            <param name="toColour">The color of the text entered by the user</param>
            <param name="maxLength">The maximum length of the string the user can enter</param>
            <param name="theFont">The font used to draw the text entered</param>
            <param name="x">The X location at which to draw the text entered</param>
            <param name="y">The Y location at which to draw the text entered</param>
        </member>
        <member name="M:SwinGame.Input.IsReadingText">
            <summary>
            IsReadingText indicates if the API is currently reading text from the
            user. Calling StartReadingText will set this to true, and it becomes
            false when the user presses enter or escape. At this point you can
            read the string entered as either ASCII or Unicode.
            </summary>
            <returns>True while the API is reading text from the user</returns>
        </member>
        <member name="M:SwinGame.Input.EndReadingText">
            <summary>
            Terminates the reading of strings from the user and returns the string they entered. 
            This string can still be read using TextReadAsASCII.
            </summary>
            <returns>The string entered by the user</returns>
        </member>
        <member name="M:SwinGame.Input.TextReadAsASCII">
            <summary>
            TextReadAsASCII allows you to read the value of the string entered by the
            user as ASCII. See TextReasAsUNICODE, StartReadingText and IsReadingText
            for more details.
            </summary>
            <returns>The string entered by the user</returns>
        </member>
        <member name="M:SwinGame.Input.IsKeyPressed(SwinGame.Keys)">
            <summary>
            Returns true when the key requested is being held down. This is updated
            as part of the ProcessEvents call. Use the key codes from the KeyCodes
            unit.
            </summary>
            <param name="key">Key</param>
            <returns>True if the key is currently being held down</returns>
        </member>
        <member name="M:SwinGame.Input.WasKeyTyped(SwinGame.Keys)">
            <summary>
            Returns true when a key is typed. This occurs when the key is pressed on the 
            keyboard, and will not reoccur until it is released and pressed again. This
            needs to be checked each ProcessEvents loop.
            </summary>
            <param name="key">Key code to check</param>
            <returns>True if the key is pressed</returns>
        </member>
        <member name="M:SwinGame.Input.MoveMouse(System.UInt16,System.UInt16)">
            <summary>
            This will move the mouse to the given x and y location
            </summary>
            <param name="x">The x pos to move the mouse to</param>
            <param name="y">The y pos to move the mouse to</param>
        </member>
        <member name="M:SwinGame.Input.MoveMouse(SwinGame.Point2D)">
            <summary>
            This will move the mouse to the given Point
            </summary>
            <param name="point">The Point containing the position to move the mouse to</param>
        </member>
        <member name="M:SwinGame.Input.HideMouse">
            <summary>
            This routine will Hide the mouse
            </summary>
        </member>
        <member name="M:SwinGame.Input.ShowMouse(System.Boolean)">
            <summary>
            This routine Shows or Hides the mouse
            </summary>
            <param name="show">if it is true it will show the mouse</param>
        </member>
        <member name="M:SwinGame.Input.ShowMouse">
            <summary>
            This routine will Show the Mouse
            </summary>
        </member>
        <member name="M:SwinGame.Input.IsMouseShown">
            <summary>
            Checks to see if the mouse is shown
            </summary>
            <returns>returns true if the mouse is shown</returns>
        </member>
        <member name="M:SwinGame.Input.AKeyWasPressed">
            <summary>
            Indicates if any key was pressed.
            </summary>
            <returns>true if a key was pressed.</returns>
        </member>
        <member name="M:SwinGame.Input.StartReadingTextWithText(System.String,System.Drawing.Color,System.Int32,SwinGame.Font,System.Int32,System.Int32)">
            <summary>
            StartReadingText start the API reading a string values from the user.
            Entry is completed when the user presses enter, and aborted with escape.
            If the user aborts entry the result is an empty string. Text entry is
            updated as part of ProcessEvents, and is drawn to the screen as part of
            the RefreshScreen call.
            </summary>
            <param name="text">The initial text that will appear in the input area</param>
            <param name="toColour">The color of the text entered by the user</param>
            <param name="maxLength">The maximum length of the string the user can enter</param>
            <param name="theFont">The font used to draw the text entered</param>
            <param name="x">The X location at which to draw the text entered</param>
            <param name="y">The Y location at which to draw the text entered</param>
        </member>
        <member name="T:SwinGame.Matrix2D">
            <summary>
            This record is used to represent transformations that can be
            used to apply these changes to vectors.
            </summary>
        </member>
        <member name="M:SwinGame.Matrix2D.op_Implicit(SwinGame.Matrix2D)~System.IntPtr">
            <summary>
            A Matrix2D can be treated as an integer pointer for the purpose
            of interacting with the SwinGame DLL.
            </summary>
            <param name="m">The matrix to get the pointer of</param>
            <returns>an IntPtr pointing to the memory where the Matrix resides</returns>
        </member>
        <member name="M:SwinGame.Matrix2D.op_Multiply(SwinGame.Matrix2D,SwinGame.Matrix2D)">
            <summary>
            Multiplies two matrixs 
            </summary>
            <param name="m1">The first Matrix</param>
            <param name="m2">The second Matrix</param>
            <returns>The combined Matrixes</returns>
        </member>
        <member name="M:SwinGame.Matrix2D.op_Multiply(SwinGame.Matrix2D,SwinGame.Vector)">
            <summary>
            Multiplies 1 Vector and 1 Matrix2D
            </summary>
            <param name="m">The Matrix2D</param>
            <param name="v">The Vector</param>
            <returns>The resulting Matrix2D</returns>
        </member>
        <member name="P:SwinGame.Matrix2D.Item(System.Int32,System.Int32)">
            <summary>
            Gets an element from the Matrix2D
            </summary>
            <param name="r">Row</param>
            <param name="c">Column</param>
            <returns>Element</returns>
        </member>
        <member name="T:SwinGame.MouseButton">
            <summary>
            Mouse Buttons
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.LeftButton">
            <summary>
            Left Mouse Button
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.MiddleButton">
            <summary>
            Middle Mouse Button
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.RightButton">
            <summary>
            Right Mouse Button
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.MouseWheelUp">
            <summary>
            Mouse Wheel Up
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.MouseWheelDown">
            <summary>
            Mouse Wheel Down
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.MouseX1Button">
            <summary>
            Mouse extended button 1
            </summary>
        </member>
        <member name="F:SwinGame.MouseButton.MouseX2Button">
            <summary>
            Mouse extended button 2
            </summary>
        </member>
        <member name="T:SwinGame.Music">
            <summary>
            The Music structure is used to hold music that can then be
            played and stopped by SwinGame. You need to ensure that you free
            all music at the end of the program (or when you no longer need it)
            </summary>
        </member>
        <member name="M:SwinGame.Music.#ctor(System.String)">
            <summary>
            Loads a music file from a give file path.
            </summary>
            <param name="path">The path to the music file to load.</param>
        </member>
        <member name="M:SwinGame.Music.Play">
            <summary>
            Start playing the music, the music will loop.
            </summary>
        </member>
        <member name="M:SwinGame.Music.Play(System.Int32)">
            <summary>
            Play the music a number of times
            </summary>
            <param name="loops">the number of times to play for effect</param>
        </member>
        <member name="M:SwinGame.Music.op_Implicit(SwinGame.Music)~System.IntPtr">
            <summary>
            Casts the SoundEffect to its native pointer.
            </summary>
            <param name="effect">the effect to cast</param>
            <returns>the native pointer</returns>
        </member>
        <member name="M:SwinGame.Music.Dispose">
            <summary>
            Clear the system resources used for this music.
            </summary>
        </member>
        <member name="M:SwinGame.Music.IsPlaying">
            <summary>
            Is used to determine if the given music is currently playing.
            </summary>
            <returns>true if the music is playing</returns>
        </member>
        <member name="M:SwinGame.Music.Stop">
            <summary>
            Stops the music playing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SwinGame.Music.Volume">
            <summary>
            The volume of the music playback.
            </summary>
        </member>
        <member name="T:SwinGame.Physics">
            <summary>
            SGSDK.NET's Physics Class contains the code to perform various mathematical
            functions and collisions.
            </summary>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedX(SwinGame.Sprite,System.Int32,SwinGame.CollisionDetectionRange)">
            <summary>
            Determines if a sprite has collided with a given x position.
            </summary>
            <param name="theSprite">The sprite to check</param>
            <param name="x">The x location to check collision with</param>
            <param name="range">The kind of check to perform less, larger or equal.</param>
            <returns>True if the sprite is within the range requested</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedY(SwinGame.Sprite,System.Int32,SwinGame.CollisionDetectionRange)">
            <summary>
            Determines if a sprite has collided with a given y position.
            </summary>
            <param name="theSprite">The sprite to check</param>
            <param name="y">The y location to check collision with</param>
            <param name="range">The kind of check to perform less, larger or equal.</param>
            <returns>True if the sprite is within the range requested</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedWithRect(SwinGame.Sprite,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Determined if a sprite has collided with a given rectangle. The rectangles
            coordinates are expressed in "world" coordinates.
            </summary>
            <param name="theSprite">The sprite to check</param>
            <param name="x">The x location of the rectangle</param>
            <param name="y">The y location of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <returns>True if the sprite collides with the rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedWithRect(SwinGame.Sprite,System.Drawing.Rectangle)">
            <summary>
            Determined if a sprite has collided with a given rectangle. The rectangles
            coordinates must be expressed in "game" coordinates.
            </summary>
            <param name="theSprite">The sprite to check</param>
            <param name="rect">The rectangle to check collisions with</param>
            <returns>True if the sprite collides with the rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveSpritesCollided(SwinGame.Sprite,SwinGame.Sprite)">
            <summary>
            Determines if two sprites have collided. Sprites have collided when
            their images overlap. You may want to consider separating these if you
            are performing any "bounce" like activities. Separation is part of the
            collision code in many cases.
            </summary>
            <param name="sprite1">The first sprite to check.</param>
            <param name="sprite2">The second sprite to check.</param>
            <returns>True if the sprites have collided.</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedWithBitmap(SwinGame.Sprite,SwinGame.Bitmap,System.Single,System.Single,System.Boolean)">
            <summary>
            Determines if a sprite has collided with a bitmap using pixel level
            collision detection with the bitmap.
            </summary>
            <param name="theSprite">The sprite to check for collision</param>
            <param name="theBitmap">The bitmap image to check for collision</param>
            <param name="x">The x location of the bitmap</param>
            <param name="y">The y location of the bitmap</param>
            <param name="bounded">Indicates if theBitmap should use bounded collision</param>
            <returns>True if the bitmap has collided with the sprite.</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedWithBitmap(SwinGame.Sprite,SwinGame.Bitmap,System.Single,System.Single)">
            <summary>
            Determines if a sprite has collided with a bitmap. The x and y values
            are expressed in "game" coordinates. This uses a bounded collision check
            rather than performing a pixel level check on the bitmap.
            </summary>
            <param name="theSprite">The sprite to check for collision</param>
            <param name="theBitmap">The bitmap image to check for collision</param>
            <param name="x">The x location of the bitmap</param>
            <param name="y">The y location of the bitmap</param>
            <returns> True if the bitmap has collided with the sprite.</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedWithBitmap(SwinGame.Sprite,SwinGame.Bitmap,SwinGame.Point2D,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Determines if a sprte has collided with a bitmap. This version is used to check
            for collisions with a cell from the bitmap. The src rectangle defines the part of
            the bitmap you want to check collisions with. This is usefull for checking
            collisions between sprites and bitmaps you use to contain multiple cells
            for animation etc.
            </summary>
            <param name="sprt">the sprite to check collision of</param>
            <param name="bmp">the bitmap containing the cell you want to check</param>
            <param name="pt">the pt, in game coordinates, of the bitmap cell</param>
            <param name="src">the rectangle containing the portion of the bitmap to check</param>
            <param name="bounded">set to true to perform a bounded box check, false for per pixel checks</param>
            <returns>true if the sprite has collided with the bitmap cell</returns>
        </member>
        <member name="M:SwinGame.Physics.HasSpriteCollidedWithBitmap(SwinGame.Sprite,SwinGame.Bitmap,SwinGame.Point2D,System.Boolean)">
            <summary>
            Determines if a sprte has collided with a bitmap. This version is used to check
            for collisions with a cell from the bitmap. The src rectangle defines the part of
            the bitmap you want to check collisions with. This is usefull for checking
            collisions between sprites and bitmaps you use to contain multiple cells
            for animation etc.
            </summary>
            <param name="sprt">the sprite to check collision of</param>
            <param name="bmp">the bitmap containing the cell you want to check</param>
            <param name="pt">the pt, in game coordinates, of the bitmap cell</param>
            <param name="bounded">set to true to perform a bounded box check, false for per pixel checks</param>
            <returns>true if the sprite has collided with the bitmap cell</returns>
        </member>
        <member name="M:SwinGame.Physics.RectangleHasCollidedWithLine(System.Drawing.Rectangle,SwinGame.LineSegment)">
            <summary>
            Returns true if the Rectangle has collided with the line specified
            </summary>
            <param name="rect">Rectangle</param>
            <param name="line">Line</param>
            <returns>True if the Rectangle has collided with the line</returns>
        </member>
        <member name="M:SwinGame.Physics.RectangleHasCollidedWithLine(SwinGame.Sprite,SwinGame.LineSegment)">
            <summary>
            Returns true if the Sprite's Rectangle has collided with the line specified
            </summary>
            <param name="sprite">Sprite</param>
            <param name="line">Line</param>
            <returns>True if the Sprite has collided with the line</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveBitmapsCollided(SwinGame.Bitmap,System.Int32,System.Int32,System.Boolean,SwinGame.Bitmap,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Checks to see if two bitmaps have collided, this performs a bounded check
            then, if required, it performs a per pixel check on the colliding region.
            </summary>
            <param name="image1">The bitmap to check for collision</param>
            <param name="x1">The x location of image 1</param>
            <param name="y1">The y location of image 1</param>
            <param name="bounded1">Indicates if image1 should use bounded collision</param>
            <param name="image2">The bitmap to check for collision</param>
            <param name="x2">The x location of image 2</param>
            <param name="y2">The y location of image 2</param>
            <param name="bounded2">Indicates if image2 should use bounded collision</param>
            <returns>True if the bitmaps collide.</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveBitmapsCollided(SwinGame.Bitmap,System.Int32,System.Int32,SwinGame.Bitmap,System.Int32,System.Int32)">
            <summary>
            Checks to see if two bitmaps have collided, this performs a bounded check.
            </summary>
            <param name="image1">The bitmap to check for collision</param>
            <param name="x1">The x location of image 1</param>
            <param name="y1">The y location of image 1</param>
            <param name="image2">The bitmap to check for collision</param>
            <param name="x2">The x location of image 2</param>
            <param name="y2">The y location of image 2</param>
            <returns>True if the bitmaps collide.</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveBitmapsCollided(SwinGame.Bitmap,SwinGame.Point2D,SwinGame.Bitmap,SwinGame.Point2D)">
            <summary>
            Checks if two bitmaps has collided using a bounded box, not pixel level
            collisions.
            </summary>
            <param name="image1">image 1</param>
            <param name="pt1">the location of image 1</param>
            <param name="image2">image 2</param>
            <param name="pt2">the location of image 2</param>
            <returns>true if the bitmaps collide at the indicated location</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveBitmapsCollided(SwinGame.Bitmap,SwinGame.Point2D,System.Boolean,SwinGame.Bitmap,SwinGame.Point2D,System.Boolean)">
            <summary>
            Checks if two bitmaps has collided using a bounded box or pixel level
            collisions.
            </summary>
            <param name="image1">image 1</param>
            <param name="pt1">the location of image 1</param>
            <param name="bounded1">if true a bounded box is used for image 1</param>
            <param name="image2">image 2</param>
            <param name="pt2">the location of image 2</param>
            <param name="bounded2">if true a bounded box is used for image 2</param>
            <returns>true if the bitmaps collide at the indicated location</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveBitmapsCollided(SwinGame.Bitmap,SwinGame.Point2D,System.Drawing.Rectangle,System.Boolean,SwinGame.Bitmap,SwinGame.Point2D,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            This performs a collision detection of two bitmap cells. This can be either
            bounded or pixel level.
            </summary>
            <param name="image1">image 1</param>
            <param name="pt1">the location of image 1</param>
            <param name="src1">the cell within image 1</param>
            <param name="bounded1">true if you want to use a bounded box for image 1, false for pixel level collisions.</param>
            <param name="image2">image 2</param>
            <param name="pt2">the location of image 2</param>
            <param name="src2">the cell within image 2</param>
            <param name="bounded2">true if you want to use a bounded box for image 2, false for pixel level collisions.</param>
            <returns>true if the cells collide at that location</returns>
        </member>
        <member name="M:SwinGame.Physics.HaveBitmapsCollided(SwinGame.Bitmap,SwinGame.Point2D,System.Drawing.Rectangle,SwinGame.Bitmap,SwinGame.Point2D,System.Drawing.Rectangle)">
            <summary>
            This performs a collision detection of two bitmap cells using bounded box
            collisions.
            </summary>
            <param name="image1">image 1</param>
            <param name="pt1">the location of image 1</param>
            <param name="src1">the cell within image 1</param>
            <param name="image2">image 2</param>
            <param name="pt2">the location of image 2</param>
            <param name="src2">the cell within image 2</param>
            <returns>true if the cells collide at that location</returns>
        </member>
        <member name="M:SwinGame.Physics.CreateVector(System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new vector with values x and y, possibly with an inverted y. The
            inversion of the y value provides a convienient option for handling
            screen related vectors.
            </summary>
            <param name="x">Initial values for the vector</param>
            <param name="y">Initial values for the vector</param>
            <param name="invertY">Indicates if the y value should be inverted.</param>
            <returns>A new vector with values x and y</returns>
        </member>
        <member name="M:SwinGame.Physics.CreateVector(System.Single,System.Single)">
            <summary>
            Creates a new vector with values x and y.
            </summary>
            <param name="x">Initial values for the vector</param>
            <param name="y">Initial values for the vector</param>
            <returns>A new vector with values x and y</returns>
        </member>
        <member name="M:SwinGame.Physics.PointToVector(SwinGame.Point2D)">
            <summary>
            Creates a new vector from the origin to the indicated point.
            </summary>
            <param name="p1">The point</param>
            <returns>A new vector from the origin (0,0) to pt (x,y)</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorFromPoints(SwinGame.Point2D,SwinGame.Point2D)">
            <summary>
            Gets the Vector from 2 Points
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <returns>Vector</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorFromCenterSpriteToPoint(SwinGame.Sprite,SwinGame.Point2D)">
            <summary>
            VectorFromCenterSpriteToPoint creates and returns the vector from centre of the sprite to the point.
            </summary>
            <param name="sprt">Sprite</param>
            <param name="pnt">Point</param>
            <returns>Vector from Sprite to Point</returns>
        </member>
        <member name="M:SwinGame.Physics.LineAsVector(SwinGame.LineSegment)">
            <summary>
            LineAsVector converts the specified line to a vector.
            </summary>
            <param name="line">Line to convert to Vector</param>
            <returns>Vector representation of the Line</returns>
        </member>
        <member name="M:SwinGame.Physics.GetVectorFromAngle(System.Single,System.Single)">
            <summary>
            Gets a Vector from a Angle
            </summary>
            <param name="angle">Angle</param>
            <param name="magnitude">Magnitude</param>
            <returns>Vector</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorFromPointToRectangle(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            VectorFromPointToRectangle creates and returns the vector from the point to the rectangle.
            </summary>
            <param name="x">X Coordinate of the point</param>
            <param name="y">Y Coordinate of the point</param>
            <param name="rectX">X Coordinate of the Rectangle</param>
            <param name="rectY">Y Coordinate of the Rectangle</param>
            <param name="rectWidth">Width of the Rectangle</param>
            <param name="rectHeight">Height of the Rectangle</param>
            <returns>Vector from Point to Rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorFromPointToRectangle(System.Single,System.Single,System.Drawing.Rectangle)">
            <summary>
            VectorFromPointToRectangle creates and returns the vector from the point to the rectangle.
            </summary>
            <param name="x">X Coordinate of the point to rectangle</param>
            <param name="y">Y Coordinate of the point to rectangle</param>
            <param name="rect">Rectangle to get the vector</param>
            <returns>Vector from point to rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorFromPointToRectangle(SwinGame.Point2D,System.Drawing.Rectangle)">
            <summary>
            VectorFromPointToRectangle creates and returns the vector from the point to the rectangle.
            </summary>
            <param name="pt">Point to get Vector</param>
            <param name="rect">Rectangle to get Vector</param>
            <returns>Vector from point to rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.HasBitmapCollidedWithRect(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the Bitmap has collided with the specified Rectangle
            </summary>
            <param name="bitmap">Bitmap</param>
            <param name="x">X Position of the Bitmap</param>
            <param name="y">Y Position of the Bitmap</param>
            <param name="rectX">X Position of the Rectangle</param>
            <param name="rectY">Y Position of the Rectangle</param>
            <param name="width">Width of the Rectangle</param>
            <param name="height">Height of the Rectangle</param>
            <returns>True if the Bitmap Collides with the Rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.HasBitmapCollidedWithRect(SwinGame.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Returns true if the Bitmap has collided with the specified Rectangle
            </summary>
            <param name="bitmap">Bitmap</param>
            <param name="x">X Position of the Bitmap</param>
            <param name="y">Y Position of the Bitmap</param>
            <param name="rectangle">Rectangle</param>
        </member>
        <member name="M:SwinGame.Physics.IsSpriteOnScreenAt(SwinGame.Sprite,System.Int32,System.Int32)">
            <summary>
            Checks if the Sprite is on Screen at the given Coordinates
            </summary>
            <param name="sprite">Sprite</param>
            <param name="x">X Coordinate</param>
            <param name="y">Y Coordinate</param>
            <returns>True if the sprite is on screen at the coordinates</returns>
        </member>
        <member name="M:SwinGame.Physics.IsSpriteOnScreenAt(SwinGame.Sprite,SwinGame.Point2D)">
            <summary>
            Checks if the Sprite is on Screen at the given Coordinates
            </summary>
            <param name="sprite">Sprite</param>
            <param name="point">Coordinates</param>
            <returns>True if the Sprite is on Screen at the Coordinates</returns>
        </member>
        <member name="M:SwinGame.Physics.CircleHasCollidedWithLine(SwinGame.Sprite,SwinGame.LineSegment)">
            <summary>
            Checks if the Sprite has Collided with the Line
            </summary>
            <param name="sprite">Sprite</param>
            <param name="line">Line</param>
            <returns>True if sprite collides with the line</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorOutOfCircleFromPoint(SwinGame.Point2D,SwinGame.Point2D,System.Single,SwinGame.Vector)">
            <summary>
            VectorOutOfCircleFromPoint calculates and returns the vector required to push the point out of the circle. 
            You will need to specify the vector of the point when calling this routine.
            </summary>
            <param name="pnt">Point to calculate against</param>
            <param name="center">Center of the Circle</param>
            <param name="radius">Radius of the Cricle</param>
            <param name="movement">Movement of the point</param>
            <returns>Vector required to push the point out of the Circle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorOutOfCircleFromCircle(SwinGame.Point2D,System.Single,SwinGame.Point2D,System.Single,SwinGame.Vector)">
            <summary>
            VectorOutOfCircleFromCircle calculates and returns the vector required to push the circle out of the another circle. 
            You will need to specify the vector of the moving circle when calling this routine.
            </summary>
            <param name="pnt">Center of the first Circle</param>
            <param name="radius1">Radius of the first Circle</param>
            <param name="center">Center of the second Circle</param>
            <param name="radius2">Radius of the second Circle</param>
            <param name="movement">Movement of the first Circle</param>
            <returns>Vector required to move the Circle outside of the second Circle</returns>
        </member>
        <member name="M:SwinGame.Physics.AddVectors(SwinGame.Vector,SwinGame.Vector)">
            <summary>
            Adds the Vector v1 and the Vector v2.
            </summary>
            <param name="v1">The vectors to work with</param>
            <param name="v2">The vectors to work with</param>
            <returns>v1 + v2</returns>
        </member>
        <member name="M:SwinGame.Physics.SubtractVectors(SwinGame.Vector,SwinGame.Vector)">
            <summary>
            Subtracts the Vector v1 and the Vector v2.
            </summary>
            <param name="v1">The vectors to work with</param>
            <param name="v2">The vectors to work with</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:SwinGame.Physics.MultiplyVector(SwinGame.Vector,System.Single)">
            <summary>
            Multiplies a Vector by a number
            </summary>
            <param name="v1">The vector to multiply</param>
            <param name="s1">The number to multiply the vector by</param>
            <returns>The multiplyed vector</returns>
        </member>
        <member name="M:SwinGame.Physics.DotProduct(SwinGame.Vector,SwinGame.Vector)">
            <summary>
            The Angle between two vectors
            </summary>
            <param name="v1">The first Vector</param>
            <param name="v2">The Second Vector</param>
            <returns>The angle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorNormal(SwinGame.Vector)">
            <summary>
            VectorNormal returns the normal of the specified vector.
            </summary>
            <param name="vect">Vector to get normal from</param>
            <returns>Normal of the Vector specified</returns>
        </member>
        <member name="M:SwinGame.Physics.LineNormal(SwinGame.LineSegment)">
            <summary>
            LineNormal returns the normal of the specified line.
            </summary>
            <param name="line">Line to get the normal from</param>
            <returns>Normal of the Line specified</returns>
        </member>
        <member name="M:SwinGame.Physics.InvertVector(SwinGame.Vector)">
            <summary>
            Inverts the vector v. Changes the direction of the vector's x and y.
            </summary>
            <param name="theVector">The vector to invert</param>
            <returns>A new inverted vector</returns>
        </member>
        <member name="M:SwinGame.Physics.LimitMagnitude(SwinGame.Vector,System.Single)">
            <summary>
            Limit the magnitude of a vector.
            </summary>
            <param name="theVector">The vector to limit</param>
            <param name="maxMagnitude">The maximum magnitude of the vector.</param>
            <returns>A new vector with the same direction as theVector,
            with a maximum magnitude of maxMagnitude</returns>
        </member>
        <member name="M:SwinGame.Physics.GetUnitVector(SwinGame.Vector)">
            <summary>
            Gets the unit vector of the passed in vector. The unit vector has a
            magnitude of 1, resulting in a vector that indicates the direction of
            the original vector.
            </summary>
            <param name="theVector">The vector to get the unit vector of</param>
            <returns>The unit vector from the passed in vector</returns>
        </member>
        <member name="M:SwinGame.Physics.IsZeroVector(SwinGame.Vector)">
            <summary>
            Indicates if the magnitude of the vector is 0.
            </summary>
            <param name="theVector">The vector to check</param>
            <returns>True if the vector has values 0, 0</returns>
        </member>
        <member name="M:SwinGame.Physics.Magnitude(SwinGame.Vector)">
            <summary>
            Returns the magnitude of a vector. The magnitude represents the length of
            the vector.
            </summary>
            <param name="theVector">The vector to get the magnitude of</param>
            <returns>The magnitude of the vector</returns>
        </member>
        <member name="M:SwinGame.Physics.CalculateAngle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the Angle between two points 
            </summary>
            <param name="x1">Position X 1</param>
            <param name="y1">Position Y 1</param>
            <param name="x2">Position X 2</param>
            <param name="y2">Position Y 2</param>
            <returns>Angle Between Points</returns>
        </member>
        <member name="M:SwinGame.Physics.CalculateAngle(SwinGame.Point2D,SwinGame.Point2D)">
            <summary>
            Calculates the Angle between 2 Points
            </summary>
            <param name="p1">First Point to Calculate Angle</param>
            <param name="p2">Second Point to Calculate Angle</param>
            <returns>Angle Between the 2 Points</returns>
        </member>
        <member name="M:SwinGame.Physics.CalculateAngle(SwinGame.Sprite,SwinGame.Sprite)">
            <summary>
            Calculates the Angle between 2 Sprites
            </summary>
            <param name="sprite1">Sprite 1</param>
            <param name="sprite2">Sprite 2</param>
            <returns>Angle Between Sprites</returns>
        </member>
        <member name="M:SwinGame.Physics.CalculateAngleBetween(SwinGame.Vector,SwinGame.Vector)">
            <summary>
            Calculates the Angle between 2 Vectors
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <returns>Angle between the 2 Vectors</returns>
        </member>
        <member name="M:SwinGame.Physics.TranslationMatrix(System.Single,System.Single)">
            <summary>
            TranslationMatric
            </summary>
            <param name="dx">Translation X</param>
            <param name="dy">Translation Y</param>
            <returns>TranslationMatric</returns>
        </member>
        <member name="M:SwinGame.Physics.ScaleMatrix(System.Single)">
            <summary>
            ScaleMatrix acquires a new Matrix which can be used to scale Vectors and Matrices
            </summary>
            <param name="scale">Scale Factor</param>
            <returns>Scale Matrix</returns>
        </member>
        <member name="M:SwinGame.Physics.RotationMatrix(System.Single)">
            <summary>
            Rotation Matrix gets the Matrix that allows you to rotate Vectors and Matrices
            </summary>
            <param name="deg">Degrees</param>
            <returns>Rotation Matrix</returns>
        </member>
        <member name="M:SwinGame.Physics.Multiply(SwinGame.Matrix2D,SwinGame.Matrix2D)">
            <summary>
            Multiplies two matrixs 
            </summary>
            <param name="m1">The first Matrix</param>
            <param name="m2">The second Matrix</param>
            <returns>The combined Matrixes</returns>
        </member>
        <member name="M:SwinGame.Physics.Multiply(SwinGame.Matrix2D,SwinGame.Vector)">
            <summary>
            Multiplies 1 Vector and 1 Matrix2D
            </summary>
            <param name="m">The Matrix2D</param>
            <param name="v">The Vector</param>
            <returns>The resulting Matrix2D</returns>
        </member>
        <member name="M:SwinGame.Physics.CalculateVectorFromTo(SwinGame.Sprite,SwinGame.Sprite)">
            <summary>
            Calculates the Vector to get from the first Sprite to the second
            </summary>
            <param name="obj">Sprite to start the Vector from</param>
            <param name="dest">Sprite to end the Vector</param>
            <returns>Vector from Sprite 1 to Sprite 2</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorIsWithinRect(SwinGame.Vector,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            VectorIsWithinRect checks if the specified vector ends at the rectangle specified. 
            The routine assumes that the vector starts from 0, 0.
            </summary>
            <param name="v">Vector to check if inside Rectangle</param>
            <param name="x">X Coordinate of the Rectangle</param>
            <param name="y">Y Coordinate of the Rectangle</param>
            <param name="width">Width of the Rectangle</param>
            <param name="height">Height of the Rectangle</param>
            <returns>True if the Vector ends at the rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorIsWithinRect(SwinGame.Vector,System.Drawing.Rectangle)">
            <summary>
            VectorIsWithinRect checks if the specified vector ends at the rectangle specified. 
            The routine assumes that the vector starts from 0, 0.
            </summary>
            <param name="v">Vector to check if inside Rectangle</param>
            <param name="rectangle">Rectangle</param>
            <returns>True if the Vector ends at the rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorOutOfRectFromPoint(SwinGame.Point2D,System.Drawing.Rectangle,SwinGame.Vector)">
            <summary>
            Gets the Vector out of a Rectangle from a Point
            </summary>
            <param name="pnt">Point</param>
            <param name="rect">Rectangle</param>
            <param name="movement">Movement of the Point</param>
            <returns>The Vector out of the Rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorOutOfRectFromRect(System.Drawing.Rectangle,System.Drawing.Rectangle,SwinGame.Vector)">
            <summary>
            Gets the Vector out of a Rectangle from a Rectangle
            </summary>
            <param name="srcRect">The Rectangle to get the Vector to move</param>
            <param name="targetRect">The Rectangle to get out of</param>
            <param name="movement">Movement of the first Rectangle</param>
            <returns>The Vector out of the Rectangle</returns>
        </member>
        <member name="M:SwinGame.Physics.VectorCollision(SwinGame.Sprite,SwinGame.Sprite)">
            <summary>
            Vector Collisions alters the vectors of two Sprites depending on
            the movement and mass of each sprute.
            </summary>
            <param name="sprite1">Sprite 1</param>
            <param name="sprite2">Sprite 2</param>
        </member>
        <member name="M:SwinGame.Physics.CircleCollisionWithLine(SwinGame.Sprite,SwinGame.LineSegment)">
            <summary>
            CircleCollisionWithLine calculates the after-effect from colliding with the line. 
            It will directly modify the value of the specified sprite's vector.
            </summary>
            <param name="sprt">Sprite</param>
            <param name="line">Line Segment</param>
        </member>
        <member name="M:SwinGame.Physics.CircularCollision(SwinGame.Sprite,SwinGame.Sprite)">
            <summary>
            CircularCollision is used to calculate an effect from a collision from two circular sprites. 
            It takes their masses and their movement vectors in consideration. 
            The routine will process the energy transfer as well.
            </summary>
            <param name="sprt1">Sprite 1</param>
            <param name="sprt2">Sprite 2</param>
        </member>
        <member name="T:SwinGame.Point2D">
            <summary>
            The Point is a data type that holds an X and Y Coordinate.
            </summary>
        </member>
        <member name="F:SwinGame.Point2D.X">
            <summary>
            X Coordinate of the Point
            </summary>
        </member>
        <member name="F:SwinGame.Point2D.Y">
            <summary>
            Y Coordinate of the Point
            </summary>
        </member>
        <member name="M:SwinGame.Point2D.op_Implicit(SwinGame.Point2D)~SwinGame.Vector">
            <summary>
            Casts the Point2D to a Vector.
            </summary>
            <param name="pnt">the point to cast</param>
            <returns>a vector to that point from the origin</returns>
        </member>
        <member name="M:SwinGame.Point2D.#ctor(System.Single,System.Single)">
            <summary>
            Creates a point2d at an x, y location.
            </summary>
            <param name="x">the x location of the point</param>
            <param name="y">the y loaction of the point</param>
        </member>
        <member name="M:SwinGame.Point2D.DistanceTo(SwinGame.Point2D)">
            <summary>
            Determines the distance between two points.
            </summary>
            <param name="dest">the other point</param>
            <returns>the distance between pt1 and pt2</returns>
        </member>
        <member name="T:SwinGame.ResourceKind">
             <summary>
             ResourceKind
            
             Use this with the resource path functions to get the path to a
             given resource. Using these functions ensures that your resource
             paths are correct across platforms
             </summary>
        </member>
        <member name="F:SwinGame.ResourceKind.FontResource">
            <summary>
            Indicates a Font Resource
            </summary>
        </member>
        <member name="F:SwinGame.ResourceKind.ImageResource">
            <summary>
            Indicates a Image Resource
            </summary>
        </member>
        <member name="F:SwinGame.ResourceKind.SoundResource">
            <summary>
            Indicates a Sound Resource
            </summary>
        </member>
        <member name="F:SwinGame.ResourceKind.MapResource">
            <summary>
            Indicates a Map Resource
            </summary>
        </member>
        <member name="F:SwinGame.ResourceKind.OtherResource">
            <summary>
            Other resouces, located directly in the resource folder
            </summary>
        </member>
        <member name="F:SwinGame.ResourceKind.None">
            <summary>
            Indicates a No Resource
            </summary>
        </member>
        <member name="T:SwinGame.Shapes">
            <summary>
            The Shapes class contains all the routines, that deal with Shapes such as Rectangles, Circles
            Lines etc.
            </summary>
        </member>
        <member name="M:SwinGame.Shapes.DistancePointToLine(System.Single,System.Single,SwinGame.LineSegment)">
            <summary>
            Returns the shortest distance from a given point (x,y) to
            a line segment.
            </summary>
            <param name="x">the x value of the point</param>
            <param name="y">the y value of the point</param>
            <param name="line">the line to find the distance to</param>
            <returns>the length of the shortest line from point (x,y) to a point
            on the line</returns>
        </member>
        <member name="M:SwinGame.Shapes.DistancePointToLine(SwinGame.Point2D,SwinGame.LineSegment)">
            <summary>
            Returns the shortest distance from a given point (x,y) to
            a line segment.
            </summary>
            <param name="pnt">the point to check from</param>
            <param name="line">the line to find the distance to</param>
            <returns>the length of the shortest line from point (x,y) to a point
            on the line</returns>
        </member>
        <member name="M:SwinGame.Shapes.ClosestPointOnLine(System.Single,System.Single,SwinGame.LineSegment)">
            <summary>
            Returns the closest point on a line to another point (x, y). 
            </summary>
            <param name="x">the x value of the point to check from</param>
            <param name="y">the y value of the point to check from</param>
            <param name="line">the line to find the closest point on</param>
            <returns>the point on the line closest to the specified point (x,y)</returns>
        </member>
        <member name="M:SwinGame.Shapes.ClosestPointOnLine(SwinGame.Point2D,SwinGame.LineSegment)">
            <summary>
            Returns the closest point on a line to another point (x, y). 
            </summary>
            <param name="fromPt">The point to check from</param>
            <param name="line">the line to find the closest point on</param>
            <returns>the point on the line closest to the specified point (x,y)</returns>
        </member>
        <member name="M:SwinGame.Shapes.CenterPoint(SwinGame.Sprite)">
            <summary>
            Returns the center point of the sprite. This does not take into
            consideration the shape of the bitmap being drawn, just returns
            the center point of the sprites bounding rectangle.
            </summary>
            <param name="sprt">The sprite to get the center point of.</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Shapes.IsPointOnLine(SwinGame.Point2D,SwinGame.LineSegment)">
            <summary>
            Determines if a point exists on a line.
            </summary>
            <param name="pnt">The point that you want to check</param>
            <param name="line">The line you want to see if the point is on</param>
            <returns>true if pnt is on the line</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreatePoint(System.Single,System.Single)">
            <summary>
            Creates a point at the given x and y. This is useful for 
            initialising points as it sets both the x and y value.
            </summary>
            <param name="x">the x value for the point</param>
            <param name="y">the y value for the point</param>
            <returns>The point with x and y value set</returns>
        </member>
        <member name="M:SwinGame.Shapes.LinesFromRect(System.Drawing.Rectangle)">
            <summary>
            Gets the line segments that make up the boundary of a rectangle.
            </summary>
            <param name="rect">the rectangle</param>
            <returns>an array of lines that represent the boundary of the rectangle</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a line from x1,y1 to x2,y2.
            </summary>
            <param name="x1">the x value of the starting point</param>
            <param name="y1">the y value of the starting point</param>
            <param name="x2">the x value of the ending point</param>
            <param name="y2">the y value of the ending point</param>
            <returns>A line from point x1,y1 to point x2, y2</returns>
        </member>
        <member name="M:SwinGame.Shapes.LineFromVector(SwinGame.Point2D,SwinGame.Vector)">
            <summary>
            Creates a line from a point, to the end of the indicated Vector. This can be
            useful for drawing a vector as a line, for debugging or level editing.
            </summary>
            <param name="pnt">the starting point of the line</param>
            <param name="mvt">the offset from the starting point to the ending point</param>
            <returns>a line from pnt, ending at the end of the vector placed at this point</returns>
        </member>
        <member name="M:SwinGame.Shapes.LineFromVector(System.Single,System.Single,SwinGame.Vector)">
            <summary>
            Creates a line from a point, to the end of the indicated Vector. This can be
            useful for drawing a vector as a line, for debugging or level editing.
            </summary>
            <param name="x">the x value of the point</param>
            <param name="y">the y value of the point</param>
            <param name="mvt">the offset from the starting point to the ending point</param>
            <returns>a line from pnt, ending at the end of the vector placed at this point</returns>
        </member>
        <member name="M:SwinGame.Shapes.LineFromVector(SwinGame.Vector)">
            <summary>
            Creates a line from the origin (0,0), to the end of the indicated Vector. This can be
            useful for drawing a vector as a line, for debugging or level editing.
            </summary>
            <param name="mvt">the offset from the starting point to the ending point</param>
            <returns>a line from the origin (0,0), ending at the end of the vector placed at this point</returns>
        </member>
        <member name="M:SwinGame.Shapes.MidPoint(SwinGame.LineSegment)">
            <summary>
            Returns the mid point of the line.
            </summary>
            <param name="line">the line to get the mid point of</param>
            <returns>The point at the middle of the line</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateRectangle(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle using the supplied values. This can be done using
            the .NET Rectangle code: rect = new Rectangle(x, y, w, h).
            </summary>
            <param name="x">the x value for the rectangle</param>
            <param name="y">the y value for the rectangle</param>
            <param name="w">the rectangle's width</param>
            <param name="h">the rectangle's height</param>
            <returns>A rectangle at x, y with the indicated width and height</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateRectangle(SwinGame.Bitmap)">
            <summary>
            Creates a rectangle to surround a bitmap. The x,y of the rectangle is
            at the origin (0,0).
            </summary>
            <param name="bmp">the bitmap to surround</param>
            <returns>A rectangle at 0,0 with the width and height from the bitmap</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateRectangle(System.Single,System.Single,SwinGame.Bitmap)">
            <summary>
            Creates a rectangle to surround a bitmap, setting the x, y of the rectangle
            to the supplied values.
            </summary>
            <param name="x">the x value for the rectangle</param>
            <param name="y">the y value for the rectangle</param>
            <param name="bmp">the bitmap to surround</param>
            <returns>A rectangle at x,y with the width and height from the bitmap</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateRectangle(SwinGame.Point2D,SwinGame.Bitmap)">
            <summary>
            Creates a rectangle to surround a bitmap, setting the x, y of the rectangle
            to the supplied point.
            </summary>
            <param name="pt">the point to set the x,y of the rectangle</param>
            <param name="bmp">the bitmap to surround</param>
            <returns>A rectangle at pt with the width and height from the bitmap</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateRectangle(SwinGame.Point2D,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle at the specified point with the indicated
            width and height
            </summary>
            <param name="pt">the point to set the x,y of the rectangle</param>
            <param name="height">the height of the rectangle</param>
            <param name="width">the width of the rectangle</param>
            <returns>A rectangle at pt with the width and height from the bitmap</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateRectangle(SwinGame.Sprite)">
            <summary>
            Creates a rectangle to surround a Sprite. The x and y value are set
            from the position of the sprite, the width and height from the sprites
            current width and height.
            </summary>
            <param name="sprt">the sprite to surround</param>
            <returns>A rectangle to surround the sprite</returns>
        </member>
        <member name="M:SwinGame.Shapes.RectangleAfterMove(System.Drawing.Rectangle,SwinGame.Vector)">
            <summary>
            Moves the rectangle by the amount specified in the vector.
            </summary>
            <param name="rect">The rectangle to move</param>
            <param name="movement">The amount to move the rectangle</param>
            <returns>A new rectangle at the new location</returns>
        </member>
        <member name="M:SwinGame.Shapes.RectanglesIntersect(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Indicates if the two rectangles intersect. You can also use the 
            method on the rectangle to perform this operation: rect1.IntersectsWith(rect2).
            </summary>
            <param name="rect1">a rectangle</param>
            <param name="rect2">another rectangle</param>
            <returns>true is rect1 and rect2 intersect</returns>
        </member>
        <member name="M:SwinGame.Shapes.Intersection(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Returns the intersection of rect1 and rect2. You can also use
            the .NET code to perform this: rect1.Intersect(rect2) which will
            change rect1, where as this code returns a new rectangle.
            </summary>
            <param name="rect1">a rectangle</param>
            <param name="rect2">another rectangle</param>
            <returns>the intersection of rect1 and rect2</returns>
        </member>
        <member name="M:SwinGame.Shapes.DistanceBetween(SwinGame.Point2D,SwinGame.Point2D)">
            <summary>
            Determines the distance between two points.
            </summary>
            <param name="pt1">one point</param>
            <param name="pt2">the other point</param>
            <returns>the distance between pt1 and pt2</returns>
        </member>
        <member name="M:SwinGame.Shapes.GetLineIntersectionPoint(SwinGame.LineSegment,SwinGame.LineSegment,SwinGame.Point2D@)">
            <summary>
            Gets the intersection point of two lines. The point is returned in the 
            out parameter pnt, the function returns true if they intersect, otherwise
            it returns false.
            </summary>
            <param name="line1">line 1</param>
            <param name="line2">line 2</param>
            <param name="pnt">output if they do intersect, in which case it is the intersection point</param>
            <returns>true if the lines intersect</returns>
        </member>
        <member name="M:SwinGame.Shapes.LineIntersectsWithLines(SwinGame.LineSegment,SwinGame.LineSegment[])">
            <summary>
            Determines if a target line intersects with ANY of the lines in the array.
            </summary>
            <param name="target">the target line to check againt those in the array</param>
            <param name="lines">the lines to check for intersections with</param>
            <returns>true if the target line intersects with any of the lines in the array</returns>
        </member>
        <member name="M:SwinGame.Shapes.LineIntersectsWithRect(SwinGame.LineSegment,System.Drawing.Rectangle)">
            <summary>
            Determines if a line intersects with a rectangle. For this to return
            true the line must intersect with one of the borders. A line contained
            wholely within the rectangle will return false.
            </summary>
            <param name="target">the target line to check</param>
            <param name="rect">the rectangle to check for collisions with</param>
            <returns>true if the line intersects with any of the borders of the rectangle</returns>
        </member>
        <member name="M:SwinGame.Shapes.PointIsWithinRect(SwinGame.Point2D,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns true if the Point is within the Rectangle specified
            </summary>
            <param name="v">Point</param>
            <param name="x">X Coordinate of the Rectangle</param>
            <param name="y">Y Coordinate of the Rectangle</param>
            <param name="w">Width of the Rectangle</param>
            <param name="h">Height of the Rectangle</param>
            <returns>True if the Point is within the Rectangle</returns>
        </member>
        <member name="M:SwinGame.Shapes.PointIsWithinRect(SwinGame.Point2D,System.Drawing.Rectangle)">
            <summary>
            Returns true if the Point is within the Rectangle specified
            </summary>
            <param name="v">Point</param>
            <param name="rect">Rectangle</param>
            <returns>Returns true if the Point is within the Rectangle</returns>
        </member>
        <member name="M:SwinGame.Shapes.GetSideForCollisionTest(SwinGame.Vector)">
            <summary>
            Gets the Side of the other Object (e.g. Wall), that a Vector would collide with.
            </summary>
            <param name="movement">Vector to use in the Collision Side Test</param>
            <returns>Side of the Collision of the Object</returns>
        </member>
        <member name="M:SwinGame.Shapes.RectangleTop(System.Drawing.Rectangle)">
            <summary>
            Returns the Top Side of the Rectangle
            </summary>
            <param name="rect">Rectangle</param>
            <returns>Top Side</returns>
        </member>
        <member name="M:SwinGame.Shapes.RectangleBottom(System.Drawing.Rectangle)">
            <summary>
            Returns the Bottom side of the Rectangle
            </summary>
            <param name="rect">Rectangle</param>
            <returns>Bottom Side</returns>
        </member>
        <member name="M:SwinGame.Shapes.RectangleLeft(System.Drawing.Rectangle)">
            <summary>
            Returns the Left Hand side of the Rectangle
            </summary>
            <param name="rect">Rectangle</param>
            <returns>Left Hand Side</returns>
        </member>
        <member name="M:SwinGame.Shapes.RectangleRight(System.Drawing.Rectangle)">
            <summary>
            Returns the Right Hand Side of the Rectangle
            </summary>
            <param name="rect">Rectangle</param>
            <returns>Right Hand Side</returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateTriangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Triangle from the points given
            </summary>
            <param name="ax">PointA X Coordinate</param>
            <param name="ay">PointA Y Coordinate</param>
            <param name="bx">PointB X Coordinate</param>
            <param name="by">PointB Y Coordinate</param>
            <param name="cx">PointC X Coordinate</param>
            <param name="cy">PointC Y Coordinate</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Shapes.CreateTriangle(SwinGame.Point2D,SwinGame.Point2D,SwinGame.Point2D)">
            <summary>
            Creates a Triangl from the points given
            </summary>
            <param name="a">PointA</param>
            <param name="b">PointB</param>
            <param name="c">PointC</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Shapes.IsPointInTriangle(SwinGame.Point2D,SwinGame.Triangle)">
            <summary>
            This function will return true if the given point can be found within the given triangle
            </summary>
            <param name="point">Point</param>
            <param name="triangle">Triangle</param>
            <returns>True if the point is in the Triangle</returns>
        </member>
        <member name="M:SwinGame.Shapes.TriangleBarycenter(SwinGame.Triangle)">
            <summary>
            Canculates the Barycenter of the passed in Triangle.
            </summary>
            <param name="triangle">The triangle to get the Barycenter of</param>
            <returns>The center point of the triangle (Barycenter)</returns>
        </member>
        <member name="M:SwinGame.Shapes.ApplyMatrix(SwinGame.Matrix2D,SwinGame.Triangle@)">
            <summary>
            Apply the passed in matrix to all of the points in the passed in triangle. The
            passed in Triangle's data will be changed using the details from the Matrix.
            </summary>
            <param name="m">the matrix containing the translations to be applied to the triangle</param>
            <param name="triangle">the triangle to alter</param>
        </member>
        <member name="T:SwinGame.SoundEffect">
            <summary>
            A sound effect object can be used to play 
            sounds using SwinGame.
            </summary>
        </member>
        <member name="M:SwinGame.SoundEffect.#ctor(System.String)">
            <summary>
            Load a sound effect from a path.
            </summary>
            <param name="path">the path to the sound effect</param>
        </member>
        <member name="M:SwinGame.SoundEffect.Play">
            <summary>
            Play the sound effect once at 100% volume.
            </summary>
        </member>
        <member name="M:SwinGame.SoundEffect.Play(System.Int32)">
            <summary>
            Play the sound effect a number of times, at 100% volume
            </summary>
            <param name="loops">the number of times to play for effect</param>
        </member>
        <member name="M:SwinGame.SoundEffect.Play(System.Single)">
            <summary>
            Play the sound effect at a given percentage volume.
            </summary>
            <param name="volume">the % volume, must be between 0 and 1, with 1.0 = 100% volume</param>
        </member>
        <member name="M:SwinGame.SoundEffect.Play(System.Int32,System.Single)">
            <summary>
            Play the sound effect a number of times at a given percentage volume.
            </summary>
            <param name="loops">the number of times to repeat the sound effect (0 plays once)</param>
            <param name="volume">the % volume, must be between 0 and 1, with 1.0 = 100% volume</param>
        </member>
        <member name="M:SwinGame.SoundEffect.IsPlaying">
            <summary>
            Determines if the sound effect is playing.
            </summary>
            <returns>true if the sound effect is playing</returns>
        </member>
        <member name="M:SwinGame.SoundEffect.op_Implicit(SwinGame.SoundEffect)~System.IntPtr">
            <summary>
            Casts the SoundEffect to its native pointer.
            </summary>
            <param name="effect">the effect to cast</param>
            <returns>the native pointer</returns>
        </member>
        <member name="M:SwinGame.SoundEffect.Dispose">
            <summary>
            Clean up the native resources used by this sound effect.
            </summary>
        </member>
        <member name="M:SwinGame.SoundEffect.Stop">
            <summary>
            Stops the sound effect playing.
            </summary>
        </member>
        <member name="T:SwinGame.Sprite">
            <summary>
            This contains number of bitmaps and its position.
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap)">
            <summary>
            Creates a basic sprite, and sets its first bitmap. Use this for non-animating sprites.
            </summary>
            <param name="startBitmap">The sprites first bitmap (index 0)</param>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap,System.Boolean,System.Int32[],SwinGame.SpriteEndingAction,System.Int32,System.Int32)">
            <summary>
            Creates a new Sprite. This version allows you to chose if you want a multi cell bitmap 
            and pick the ending action
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="isMulti">set to true if the bitmap is a tileset</param>
            <param name="framesPerCell">framesPerCell sets howmany times each frame is drawn</param>
            <param name="endingAction">sets the ending action</param>
            <param name="width">The width of the Sprite</param>
            <param name="height">The height of the Sprite</param>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap,System.Boolean,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a new Sprite. This version allows you to chose if you want a multi cell bitmap
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="isMulti">set to true if the bitmap is a tileset</param>
            <param name="framesPerCell">framesPerCell sets howmany times each frame is drawn</param>
            <param name="width">The width of the Sprite</param>
            <param name="height">The height of the Sprite</param>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a Sprite. This version allows you to pick the frames per cell
            </summary>
            <param name="startBitmap">StartBitmap</param>
            <param name="framesPerCell">Delay each frame</param>
            <param name="frames">number of Frames</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap[],System.Int32[],SwinGame.SpriteEndingAction)">
            <summary>
            Creates a new Sprite. This version allows you to set how many times each frame is drawn
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="framesPerCell">framesPerCell sets how many times each frame is drawn</param>
            <param name="endingAction">sets the ending action</param>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap[],System.Int32[])">
            <summary>
            Creates a new Sprite with an array of bitmaps
            </summary>
            <param name="startBitmap">Bitmap to add</param>
            <param name="framesPerCell">framesPerCell sets howmany times each frame is drawn</param>
        </member>
        <member name="M:SwinGame.Sprite.#ctor(SwinGame.Bitmap[],System.Int32,System.Int32)">
            <summary>
            Creates a Sprite with an array of bitmaps and the frames per cell
            </summary>
            <param name="startBitmap">Start Bitmap</param>
            <param name="framesPerCell">Delay per Frame</param>
            <param name="frames">Number of Frames</param>
        </member>
        <member name="M:SwinGame.Sprite.UpdateAnimation">
            <summary>
            Updates the Sprites Animation, this will move to the next frame in the sprite
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.op_Implicit(SwinGame.Sprite)~System.IntPtr">
            <summary>
            Casts the Sprite to its native pointer.
            </summary>
            <param name="sprt">the sprite to cast</param>
            <returns>the native pointer to the sprite</returns>
        </member>
        <member name="M:SwinGame.Sprite.AddBitmap(SwinGame.Bitmap)">
            <summary>
            Sprites may contain multiple images. These images can be used for things
            line animation, facing, etc. This routine adds a bitmap to a sprite,
            returning the index of the added bitmap.
            </summary>
            <param name="bitmapToAdd">the bitmap to add to the sprite</param>
            <returns>the index of the added bitmap</returns>
        </member>
        <member name="M:SwinGame.Sprite.Draw">
            <summary>
            Draws a sprite to the game screen
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the sprite with an offset.
            </summary>
            <param name="xOffset">the x offset of the sprite when drawn</param>
            <param name="yOffset">the y offset of the sprite when drawn</param>
        </member>
        <member name="M:SwinGame.Sprite.Move(SwinGame.Vector)">
            <summary>
            Moves a sprite based on information in a movement vector
            </summary>
            <param name="movementVector">The vector containing the movement details</param>
        </member>
        <member name="M:SwinGame.Sprite.Move">
            <summary>
            Moves a sprite based on the movement vector that is associated
            with the sprite.
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves a sprite to a given x,y location, x and y are in game 
            coordinates not screen coordinates
            </summary>
            <param name="x">the new location of the sprite</param>
            <param name="y">the new location of the sprite</param>
        </member>
        <member name="M:SwinGame.Sprite.IsOffscreen">
            <summary>
            Determines if a sprite is off the screen
            </summary>
            <returns>True if the sprite is off the screen</returns>
        </member>
        <member name="M:SwinGame.Sprite.Dispose">
            <summary>
            Clean up system resources.
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.GetSpriteBitmap(System.Int32)">
            <summary>
            Gets a Sprite's Bitmap
            </summary>
            <param name="id">Id</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:SwinGame.Sprite.ReplayAnimation">
            <summary>
            Replays a Sprite's Animation, if it has stopped
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.Update">
            <summary>
            Updates the Sprites Animation and Movement
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.Update(System.Single)">
            <summary>
             Updates a sprite a given percentage
            </summary>
            <param name="pct">the percentage to update the sprite, 1 = 100%</param>
        </member>
        <member name="M:SwinGame.Sprite.UpdateAnimation(System.Single)">
            <summary>
             Updates a sprite's animation by a given percentage
            </summary>
            <param name="pct">the percentage to update the sprite, 1 = 100%</param>
        </member>
        <member name="M:SwinGame.Sprite.CenterCamera(System.Int32,System.Int32)">
            <summary>
            Move the Camera to center on the Sprite. This must be called each time
            you move the sprite if you want the camera to follow that sprite. The offsets
            allow you to move the sprite from direct center, for example if yOffset is set
            to +10 the sprite will appear 10 pixels below center.
            </summary>
            <param name="xOffset">The x offset from center</param>
            <param name="yOffset">The y offset from center</param>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedX(System.Int32,SwinGame.CollisionDetectionRange)">
            <summary>
            Determines if a sprite has collided with a given x position.
            </summary>
            <param name="x">The x location to check collision with</param>
            <param name="range">The kind of check to perform less, larger or equal.</param>
            <returns>True if the sprite is within the range requested</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedY(System.Int32,SwinGame.CollisionDetectionRange)">
            <summary>
            Determines if a sprite has collided with a given y position.
            </summary>
            <param name="y">The y location to check collision with</param>
            <param name="range">The kind of check to perform less, larger or equal.</param>
            <returns>True if the sprite is within the range requested</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedWithRect(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Determined if a sprite has collided with a given rectangle. The rectangles
            coordinates are expressed in "world" coordinates.
            </summary>
            <param name="x">The x location of the rectangle</param>
            <param name="y">The y location of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
            <returns>True if the sprite collides with the rectangle</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedWithRect(System.Drawing.Rectangle)">
            <summary>
            Determined if a sprite has collided with a given rectangle. The rectangles
            coordinates must be expressed in "game" coordinates.
            </summary>
            <param name="rect">The rectangle to check collisions with</param>
            <returns>True if the sprite collides with the rectangle</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedWith(SwinGame.Sprite)">
            <summary>
            Determines if two sprites have collided. Sprites have collided when
            their images overlap. You may want to consider separating these if you
            are performing any "bounce" like activities. Separation is part of the
            collision code in many cases.
            </summary>
            <param name="other">The other sprite to check.</param>
            <returns>True if the sprites have collided.</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedWithBitmap(SwinGame.Bitmap,System.Single,System.Single,System.Boolean)">
            <summary>
            Determines if a sprite has collided with a bitmap using pixel level
            collision detection with the bitmap.
            </summary>
            <param name="theBitmap">The bitmap image to check for collision</param>
            <param name="x">The x location of the bitmap</param>
            <param name="y">The y location of the bitmap</param>
            <param name="bounded">Indicates if theBitmap should use bounded collision</param>
            <returns>True if the bitmap has collided with the sprite.</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedWithBitmap(SwinGame.Bitmap,SwinGame.Point2D,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Determines if a sprte has collided with a bitmap. This version is used to check
            for collisions with a cell from the bitmap. The src rectangle defines the part of
            the bitmap you want to check collisions with. This is usefull for checking
            collisions between sprites and bitmaps you use to contain multiple cells
            for animation etc.
            </summary>
            <param name="bmp">the bitmap containing the cell you want to check</param>
            <param name="pt">the pt, in game coordinates, of the bitmap cell</param>
            <param name="src">the rectangle containing the portion of the bitmap to check</param>
            <param name="bounded">set to true to perform a bounded box check, false for per pixel checks</param>
            <returns>true if the sprite has collided with the bitmap cell</returns>
        </member>
        <member name="M:SwinGame.Sprite.HasCollidedWithBitmap(SwinGame.Bitmap,SwinGame.Point2D,System.Boolean)">
            <summary>
            Determines if a sprte has collided with a bitmap. This version is used to check
            for collisions with a cell from the bitmap. The src rectangle defines the part of
            the bitmap you want to check collisions with. This is usefull for checking
            collisions between sprites and bitmaps you use to contain multiple cells
            for animation etc.
            </summary>
            <param name="bmp">the bitmap containing the cell you want to check</param>
            <param name="pt">the pt, in game coordinates, of the bitmap cell</param>
            <param name="bounded">set to true to perform a bounded box check, false for per pixel checks</param>
            <returns>true if the sprite has collided with the bitmap cell</returns>
        </member>
        <member name="M:SwinGame.Sprite.VectorFromCenterToPoint(SwinGame.Point2D)">
            <summary>
            Creates and returns the vector from centre of the sprite to the point.
            </summary>
            <param name="pnt">Point</param>
            <returns>Vector from Sprite to Point</returns>
        </member>
        <member name="M:SwinGame.Sprite.IsOnScreenAt(System.Int32,System.Int32)">
            <summary>
            Checks if the Sprite is on Screen at the given Coordinates
            </summary>
            <param name="x">X Coordinate</param>
            <param name="y">Y Coordinate</param>
            <returns>True if the sprite is on screen at the coordinates</returns>
        </member>
        <member name="M:SwinGame.Sprite.IsOnScreenAt(SwinGame.Point2D)">
            <summary>
            Checks if the Sprite is on Screen at the given Coordinates
            </summary>
            <param name="point">Coordinates</param>
            <returns>True if the Sprite is on Screen at the Coordinates</returns>
        </member>
        <member name="M:SwinGame.Sprite.VectorTo(SwinGame.Sprite)">
            <summary>
            Calculates the Vector to get from the first Sprite to the second
            </summary>
            <param name="dest">Sprite to end the Vector</param>
            <returns>Vector from Sprite 1 to Sprite 2</returns>
        </member>
        <member name="M:SwinGame.Sprite.BounceOff(SwinGame.Sprite)">
            <summary>
            "Bounce" the two Sprites off each other, based on their mass and 
            movement. This alters the vectors of two Sprites depending on
            the movement and mass of each sprite.
            </summary>
            <param name="other">the other sprite</param>
        </member>
        <member name="P:SwinGame.Sprite.Height">
            <summary>
            Returns the current height of the sprite
            </summary>
            <returns>The height of the sprite's current frame</returns>
        </member>
        <member name="P:SwinGame.Sprite.Width">
            <summary>
            Returns the current width of the sprite
            </summary>
            <returns>The width of the sprite's current frame</returns>
        </member>
        <member name="P:SwinGame.Sprite.Item(System.Int32)">
            <summary>
            Array of bitmaps this sprite contains
            </summary>
            <param name="idx">Index number</param>
            <returns>Bitmap of the specified frame</returns>
        </member>
        <member name="P:SwinGame.Sprite.X">
            <summary>
            X position of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Y">
            <summary>
            Y position of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.CurrentFrame">
            <summary>
            Current animation frame of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.UsePixelCollision">
            <summary>
            True if this sprite use pixel collision
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.SpriteKind">
            <summary>
            Gets the Sprite Kind of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.FramesPerCell">
            <summary>
            Gets the Frames per Cell of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Cols">
            <summary>
            Gets the number of Columns of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Rows">
            <summary>
            Gets the number of Rows of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.FrameCount">
            <summary>
            Gets the Frame Count of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.EndingAction">
            <summary>
            Gets the Ending Action of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.hasEnded">
            <summary>
            Gets whether the Sprite Animation has Ended
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Reverse">
            <summary>
            Gets whether the Sprite is reversed
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Movement">
            <summary>
            The movement of this sprite
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Mass">
            <summary>
            Gets and Sets this Mass
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.CenterPoint">
            <summary>
            Returns the center point of the sprite. This does not take into
            consideration the shape of the bitmap being drawn, just returns
            the center point of the sprites bounding rectangle.
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Rotation">
            <summary>
            Indicates the degrees of rotation for this Sprite.
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.Zoom">
            <summary>
            Indicates the current Zoom amount for the Sprite.
            </summary>
        </member>
        <member name="T:SwinGame.Sprite.MovementClass">
            <summary>
            Constructor of this sprite
            </summary>
        </member>
        <member name="M:SwinGame.Sprite.MovementClass.SetTo(SwinGame.Vector)">
            <summary>
            Sets the Movement of this sprite
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:SwinGame.Sprite.MovementClass.op_Implicit(SwinGame.Sprite.MovementClass)~SwinGame.Vector">
            <summary>
            Implicit cast of the Movement to a Vector
            </summary>
            <param name="mc">Movement Class</param>
            <returns>Vector</returns>
        </member>
        <member name="M:SwinGame.Sprite.MovementClass.AsVector">
            <summary>
            Turns the movement data into a vector.
            </summary>
            <returns>A vector representing the movement data</returns>
        </member>
        <member name="P:SwinGame.Sprite.MovementClass.X">
            <summary>
            The movement of this sprite in the x direction
            </summary>
        </member>
        <member name="P:SwinGame.Sprite.MovementClass.Y">
            <summary>
            The movement of this sprite in the y direction
            </summary>
        </member>
        <member name="T:SwinGame.SpriteEndingAction">
            <summary>
             Record: SpriteEndingAction
            
             It is used to determine what this sprite should do when it finishes
             animating.
             </summary>
        </member>
        <member name="F:SwinGame.SpriteEndingAction.Loop">
            <summary>
            Loops forward
            </summary>
        </member>
        <member name="F:SwinGame.SpriteEndingAction.ReverseLoop">
            <summary>
            Loops back and forth
            </summary>
        </member>
        <member name="F:SwinGame.SpriteEndingAction.ReverseOnce">
            <summary>
            Reverse Once
            </summary>
        </member>
        <member name="F:SwinGame.SpriteEndingAction.Stop">
            <summary>
            No Loop
            </summary>
        </member>
        <member name="T:SwinGame.SpriteKind">
            It is used to determine how a sprite should act.
        </member>
        <member name="F:SwinGame.SpriteKind.StaticSprite">
            <summary>
            StaticSprite will no animate at all.
            </summary>
        </member>
        <member name="F:SwinGame.SpriteKind.AnimArraySprite">
            <summary>
            AnimArraySprite will animate using an array of bitmaps.
            </summary>
        </member>
        <member name="F:SwinGame.SpriteKind.AnimMultiSprite">
            <summary>
            AnimMultiSprite will animate using a single bitmap with multiple
            frames.
            </summary>
        </member>
        <member name="T:SwinGame.SwinGameException">
            <summary>
            A SwinGameException will occur if something has gone wrong in 
            SwinGame. In many cases this will indicate that you are using the API
            in a way that was not intended. If you believe there is a bug, or need
            help with an Exception please use the forum at http://www.swingame.com
            </summary>
        </member>
        <member name="M:SwinGame.SwinGameException.#ctor(System.String)">
            <summary>
            SwinGameExceptions
            </summary>
            <param name="message">Exception Message</param>
        </member>
        <member name="T:SwinGame.Tile">
            <summary>
            A Tile structure, contains the index in which the tile occurs in the map, and also the 4 points that create
            the tiles shape, Square/Rectangular or Isometric
            </summary>
        </member>
        <member name="F:SwinGame.Tile.xIndex">
            <summary>
            X Index of the tile, this indicates what row the tile exists on
            </summary>
        </member>
        <member name="F:SwinGame.Tile.yIndex">
            <summary>
            Y Index of the tile, this indicates what column the tile exists on
            </summary>
        </member>
        <member name="F:SwinGame.Tile.topCorner">
            <summary>
            The top right hand coordinate of the Tile
            </summary>
        </member>
        <member name="F:SwinGame.Tile.pointA">
            <summary>
            The first point of the tile
            </summary>
        </member>
        <member name="F:SwinGame.Tile.pointB">
            <summary>
            The second point of the tile
            </summary>
        </member>
        <member name="F:SwinGame.Tile.pointC">
            <summary>
            The third point of the tile
            </summary>
        </member>
        <member name="F:SwinGame.Tile.pointD">
            <summary>
            The fourth point of the tile
            </summary>
        </member>
        <member name="T:SwinGame.Timer">
            <summary>
            Timers can be used to perform time based actions. You can
            create a number of timers, and each can be started, stopped,
            paused, etc. You can then read the number of ticks that have
            occurred since the timer was started, when paused this wont increase
            until it is unpaused. Ticks are measured in milliseconds, 1/1000 of
            a second.
            </summary>
        </member>
        <member name="M:SwinGame.Timer.op_Implicit(SwinGame.Timer)~System.IntPtr">
            <summary>
            Cast the bitmap to its native pointer.
            </summary>
            <param name="tmr">the timer</param>
            <returns>its native pointer</returns>
        </member>
        <member name="M:SwinGame.Timer.Dispose">
            <summary>
            Clean up the associated system resources.
            </summary>
        </member>
        <member name="M:SwinGame.Timer.#ctor">
            <summary>
            Creates a new Timer that you can start, stop, read, etc. Timers
            are useful for implementing time based movement rather than framerate
            based movement. You must free the timer when you are finished with
            it.
            </summary>
        </member>
        <member name="M:SwinGame.Timer.Start">
            <summary>
            Start the timer ticking. The timer's value will now increase with time.
            </summary>
        </member>
        <member name="M:SwinGame.Timer.Stop">
            <summary>
            Stop a timer. If the timer is restarted it will now reset back
            to 0 ticks.
            </summary>
        </member>
        <member name="M:SwinGame.Timer.Pause">
            <summary>
            Pause the timer. Reading the timer will now give the same value until
            the timer is unpaused, at which point it will continue from where
            it is up to.
            </summary>
        </member>
        <member name="M:SwinGame.Timer.Resume">
            <summary>
            Resume a paused timer. The timer will continue from where it was up to
            when it was paused.
            </summary>
        </member>
        <member name="P:SwinGame.Timer.Ticks">
            <summary>
            Get the number of ticks (milliseconds) that have passed since
            the timer was started. When paused this will return the same 
            value until unpaused.
            </summary>
        </member>
        <member name="T:SwinGame.Triangle">
            <summary>
            A Triangle is a data type that holds 3 points, that when connected, form a triangle
            </summary>
        </member>
        <member name="F:SwinGame.Triangle.PointA">
            <summary>
            First Point Coordinate of the Triangle
            </summary>
        </member>
        <member name="F:SwinGame.Triangle.PointB">
            <summary>
            Second Point Coordinate of the Triangle
            </summary>
        </member>
        <member name="F:SwinGame.Triangle.PointC">
            <summary>
            Third Point Coordinate of the Triangle
            </summary>
        </member>
        <member name="M:SwinGame.Triangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Triangle from the points given
            </summary>
            <param name="ax">PointA X Coordinate</param>
            <param name="ay">PointA Y Coordinate</param>
            <param name="bx">PointB X Coordinate</param>
            <param name="by">PointB Y Coordinate</param>
            <param name="cx">PointC X Coordinate</param>
            <param name="cy">PointC Y Coordinate</param>
            <returns></returns>
        </member>
        <member name="M:SwinGame.Triangle.#ctor(SwinGame.Point2D,SwinGame.Point2D,SwinGame.Point2D)">
            <summary>
            Creates a Triangl from the points given
            </summary>
            <param name="a">PointA</param>
            <param name="b">PointB</param>
            <param name="c">PointC</param>
        </member>
        <member name="M:SwinGame.Triangle.IsPointInTriangle(SwinGame.Point2D)">
            <summary>
            This function will return true if the given point can be found within the given triangle
            </summary>
            <param name="point">Point</param>
            <returns>True if the point is in the Triangle</returns>
        </member>
        <member name="M:SwinGame.Triangle.Barycenter">
            <summary>
            Canculates the Barycenter of the passed in Triangle.
            </summary>
            <returns>The center point of the triangle (Barycenter)</returns>
        </member>
        <member name="M:SwinGame.Triangle.ApplyMatrix(SwinGame.Matrix2D)">
            <summary>
            Apply the passed in matrix to all of the points in the passed in triangle. The
            passed in Triangle's data will be changed using the details from the Matrix.
            </summary>
            <param name="m">the matrix containing the translations to be applied to the triangle</param>
        </member>
        <member name="P:SwinGame.Triangle.Item(System.Int32)">
            <summary>
            Access the three points on the triangle.
            </summary>
            <param name="index">point index</param>
            <returns>a point of the triangle</returns>
        </member>
        <member name="T:SwinGame.Vector">
            <summary>
            A vector is used to represent movement. Each vector has an
            X and Y value indicating the components of the movement.
            </summary>
        </member>
        <member name="M:SwinGame.Vector.#ctor(System.Single,System.Single)">
            <summary>
            Create a Vector with a give X and Y value.
            </summary>
            <param name="x">the x value of the vector</param>
            <param name="y">the y value of the vector</param>
        </member>
        <member name="M:SwinGame.Vector.op_Addition(SwinGame.Vector,SwinGame.Vector)">
            <summary>
            Adds one vector to another.
            </summary>
            <param name="l">l + r</param>
            <param name="r">l + r</param>
            <returns>Returns a new vectro from l + r</returns>
        </member>
        <member name="M:SwinGame.Vector.op_Subtraction(SwinGame.Vector,SwinGame.Vector)">
            <summary>
            Subtracts the Vector v1 and the Vector v2.
            </summary>
            <param name="v1">The vectors to work with</param>
            <param name="v2">The vectors to work with</param>
            <returns>v1 - v2</returns>
        </member>
        <member name="M:SwinGame.Vector.op_Multiply(SwinGame.Vector,System.Single)">
            <summary>
            Multiplies a Vector by a number
            </summary>
            <param name="v1">The vector to multiply</param>
            <param name="s1">The number to multiply the vector by</param>
            <returns>The multiplyed vector</returns>
        </member>
        <member name="M:SwinGame.Vector.DotProduct(SwinGame.Vector)">
            <summary>
            The Angle between two vectors
            </summary>
            <param name="v2">The Second Vector</param>
            <returns>The angle</returns>
        </member>
        <member name="M:SwinGame.Vector.LimitMagnitude(System.Single)">
            <summary>
            Limit the magnitude of a vector.
            </summary>
            <param name="maxMagnitude">The maximum magnitude of the vector.</param>
            <returns>A new vector with the same direction as theVector,
            with a maximum magnitude of maxMagnitude</returns>
        </member>
        <member name="M:SwinGame.Vector.IsWithinRect(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            VectorIsWithinRect checks if the specified vector ends at the rectangle specified. 
            The routine assumes that the vector starts from 0, 0.
            </summary>
            <param name="x">X Coordinate of the Rectangle</param>
            <param name="y">Y Coordinate of the Rectangle</param>
            <param name="width">Width of the Rectangle</param>
            <param name="height">Height of the Rectangle</param>
            <returns>True if the Vector ends at the rectangle</returns>
        </member>
        <member name="M:SwinGame.Vector.IsWithinRect(System.Drawing.Rectangle)">
            <summary>
            VectorIsWithinRect checks if the specified vector ends at the rectangle specified. 
            The routine assumes that the vector starts from 0, 0.
            </summary>
            <param name="rectangle">Rectangle</param>
            <returns>True if the Vector ends at the rectangle</returns>
        </member>
        <member name="P:SwinGame.Vector.X">
            <summary>
            The X Component of the Vector, i.e. the movement 
            in the X direction
            </summary>
        </member>
        <member name="P:SwinGame.Vector.Y">
            <summary>
            The Y Component of the Vector, i.e. the movement
            in the Y direction
            </summary>
        </member>
        <member name="P:SwinGame.Vector.Normal">
            <summary>
            VectorNormal returns the normal of the specified vector.
            </summary>
            <returns>Normal of the Vector specified</returns>
        </member>
        <member name="P:SwinGame.Vector.Inverse">
            <summary>
            Inverts the vector. Changes the direction of the vector's x and y.
            </summary>
            <returns>A new inverted vector</returns>
        </member>
        <member name="P:SwinGame.Vector.UnitVector">
            <summary>
            Gets the unit vector of the passed in vector. The unit vector has a
            magnitude of 1, resulting in a vector that indicates the direction of
            the original vector.
            </summary>
            <returns>The unit vector from the passed in vector</returns>
        </member>
        <member name="P:SwinGame.Vector.IsZeroVector">
            <summary>
            Indicates if the magnitude of the vector is 0.
            </summary>
            <returns>True if the vector has values 0, 0</returns>
        </member>
        <member name="P:SwinGame.Vector.Magnitude">
            <summary>
            Returns the magnitude of a vector. The magnitude represents the length of
            the vector.
            </summary>
            <returns>The magnitude of the vector</returns>
        </member>
    </members>
</doc>
